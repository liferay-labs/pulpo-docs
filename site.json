{"title":"Pulpo","githubRepo":"liferay-labs","googleAnalytics":"UA-37033501-5","index":{"title":"Home","description":"We gather data, analyse it, process it and expose it for you as a beautiful API ","content":" Copyright © 2017 Liferay, Inc Powered by WeDeploy™ ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/./","children":{"docs":{"title":"APIS","description":"Everything you need to know to use the APIs.","content":" Docs Start learning how to leverage the power of . Choose an API All APIs follow a Restful approach with auto discovery. This will help ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","url":"/docs/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of . ","srcFilePath":"src/pages/docs/search.soy","id":"search","location":"/docs/search.html","url":"/docs/search.html"},"account_segments":{"title":"Account Segments","description":"Account Segments API.","layout":"guide","icon":"person-card","weight":9,"content":" {$page.description} The Account Segment Model Account Segments are aggregations of Accounts. These aggregations can be: Dynamic: A Variable set of accounts matching a certain condition (filter) belong to the Account Segment. Static: A fixed set of accounts have been manually associated to the Account Segment. The following fields are currently supported as part of an Account Segment: dateCreated dateModified filter - an oData filter that defines, for Account Segments with segmentType=DYNAMIC, which Accounts belong to this Account Segment identifier name - The name of the Account Segment segmentType - defines if the Account Segment aggregates Accounts dynamically or statically. The accepted values are Type.STATIC and Type.DYNAMIC Account Segment Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as account-segments pointing to the collection of Account Segments. This API supports pagination and sorting. The response will contain inside the _embedded section, a list of account segments under the key account-segments. This is an example of a response to this url: http://localhost:8084/my-project/account-segments?page=0&size=20 { \"_embedded\": { \"account-segments\":[ { \"dateCreated\":\"2017-11-15T16:23:35Z\", \"dateModified\":\"2017-11-15T16:23:35Z\", \"filter\":null, \"identifier\":\"AV_Afi6-Y3UMLZEdmkBE\", \"name\":\"Partners\", \"segmentType\":\"STATIC\", \"_links\":{ \"self\":{ \"href\":\"http://localhost:8084/my-project/account-segments/AV_Afi6-Y3UMLZEdmkBE\" }, \"account-segments\":{ \"href\":\"http://localhost:8084/my-project/account-segments{?filter}\", \"templated\":true }, \"accounts\":{ \"href\":\"http://localhost:8084/my-project/account-segments/AV_Afi6-Y3UMLZEdmkBE/accounts{?filter}\", \"templated\":true }, \"memberships\": { \"href\":\"http://localhost:8084/my-project/account-segments/AV_81uji7IU2hIVahEU6/memberships\" } } } ] }, \"_links\":{ \"self\":{ \"href\":\"http://localhost:8084/my-project/account-segments?page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Account Segments is supported making a POST to the Collection URL. This is an example of the body passed to this POST request: { \"name\" : \"My First AccountSegment\", \"filter\" : \"(organization/employees/value eq '30')\", \"segmentType\" : \"DYNAMIC\" } Navigating through the list of entities, the link to each entity can be found with the rel self. That same url can be also used for delete (DELETE method) and update (PUT method). Account Segment Links As part of the links of each account, the following links can be found using these keys: account-segments - The collection of Account Segments accounts - The collection of Accounts who belong to this Account Segment. This collection can be filtered as explained in filtering. memberships - The collection of Memberships of this Account Segment. This collection can be used to add new members to this account segment manually, as described in #4. Account Segment Membership Collection Creation of new Account-Account Segment memberships is supported only for Account Segments with segmentType=STATIC by making a POST to the memberships Collection URL of each account segment . This is an example of the body passed to this POST request to the URL http://localhost:8084/my-project/account-segments/my-account-segment-identifier/memberships { \"accountIdentifier\" : \"my-account-identifier\" } A DELETE request to the URL http://localhost:8084/my-project/account-segments/my-account-segment-identifier/memberships/my-account-identifier removes an existing Account-Account Segment membership. Account Segment Membership Count The current value of the count of Accounts that are members of an Account Segment can be obtained from the totalElements field of the accounts collection. The historical values of the count of Accounts that are members of an Account Segment are stored as Fields with the name accountCount and associated to the Individual Segment through the ownerType and ownerIdentifier properties. For example, using the oData filter (name eq 'accountCount') and (ownerype eq 'account-segment') and (ownerIdentifier eq 'AV_Afi6-Y3UMLZEdmkBE') returns a collection of fields with the historical count values for the Account Segment with identifier AV_Afi6-Y3UMLZEdmkBE. The latest value of the count is also stored in the fields of the Account Segment and therefore it can be used to filter and sort the collection of Account Segments. However, it is very important to know that this value may be outdated since this is just the latest historical value that is updated once a day. For the accurate number of members, the totalElements field from the collection should be retrieved. For example, this URL would obtain the the collection of Account segments sorted by number of members. http://localhost:8084/my-project/account-segments?sort=fields/accountCount/value ","srcFilePath":"src/pages/docs/account_segments/index.md","id":"account_segments","location":"/docs/account_segments/","url":"/docs/account_segments/"},"accounts":{"title":"Accounts","description":"Accounts API.","layout":"guide","icon":"org_chart","weight":8,"content":" {$page.description} The Accounts Model Accounts are a complex entity that contain several contexts for each Organization stored in our system. Those contexts are: Organization Sentiment Analysis Sales Interaction Transactions Firmographic Support Interaction etc Only some of those contexts are available for now. Each context will contain certain Fields with information. These fields will correspond to schema.org Properties The following fields are currently supported as part of an Invididual: dataSourceIdentifiers - a map with the different datasource identifiers and the datasource individual identifier (the primary key of this account in the original datasource) dateCreated dateModified identifier organization - a Map of organizational Fields corresponding to properties of the Type Organization from Schema.org Accounts Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as accounts pointing to the collection of Accounts. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of accounts under the key accounts. This is an example of a response to this url: http://localhost:8084/my-project/accounts?page=0&size=1 { \"_embedded\": { \"accounts\": [ { \"dateCreated\": \"2017-11-14T15:32:06Z\", \"dateModified\": \"2017-11-14T15:32:07Z\", \"identifier\": \"AV-7KK2z2uFXwMzLKdBu\", \"organization\": { \"ISIC\": [ { \"context\": \"organization\", \"dataSourceIdentifier\": null, \"dateModified\": \"2017-11-14T15:32:07Z\", \"fieldType\": \"http://schema.org/isicV4\", \"label\": null, \"name\": \"Economic Activity\", \"ownerIdentifier\": \"AV-7KK2z2uFXwMzLKdBu\", \"ownerType\": \"account\", \"projectId\": \"DEMO\", \"value\": \"G762\" } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/accounts/AV-7KK2z2uFXwMzLKdBu\" }, \"accounts\": { \"href\": \"http://localhost:8084/my-project/accounts{?filter}\", \"templated\": true }, \"individuals\": { \"href\": \"http://localhost:8084/my-project/accounts/AV_Afi95Y3UMLZEdmkBK/individuals{?filter}\" }, \"memberships\": { \"href\": \"http://localhost:8084/my-project/accounts/AV_81uhW7IU2hIVahEU2/memberships\" }, \"account-segments\": { \"href\": \"http://localhost:8084/my-project/accounts/AV-7KK2z2uFXwMzLKdBu/account-segments{?filter}\", \"templated\": true } } } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/accounts?page=0&size=1\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Accounts or Update of Accounts manually is not supported. Accounts are automatically generated and updated from the Field Chunks sent by the different Connectors. Deletion of existing Accounts is not allowed for now either. Navigating through the list of accounts, the link to each account can be found with the rel self. Filtering and Sorting Accounts Collection Accounts collection can be filtered as explained in filtering. These are some examples of filtering: Accounts from Madrid: ?filter=(organization/location/value eq 'Madrid') Accounts with yearly revenue greater than 50000: ?filter=(organization/yearlyRevenue/value gt '50000') Accounts from Madrid sorted by yearlyRevenue in descending order:?filter=(organization/location/value eq 'Madrid')&sort=organization/yearlyRevenue/value,desc Accounts in the financial sector located either in Malaga or Madrid with a yearly revenue lower than 50000:?filter=(organization/location/value eq 'Madrid' or organization/location/value eq 'Malaga') and (organization/yearlyRevenue/value lt '50000') and (organization/isicV4/value eq 'K6419') Accounts Links As part of the links of each account, the following links can be found using these keys: account-segments - The collection of Account Segments this account belongs to accounts - The collection of Accounts individuals - The collection of Individuals who belong to this account. This collection can be filtered as explained in filtering. memberships - The collection of Memberships of this account. This collection can be used to add new members to this account manually, as described in 5. Accounts Membership Collection Creation of new Individual-Account memberships is supported making a POST to the memberships Collection URL of each account . This is an example of the body passed to this POST request to the URL http://localhost:8084/my-project/accounts/my-account-identifier/memberships { \"individualIdentifier\" : \"my-individual-identifier\" } A DELETE request to the URL http://localhost:8084/my-project/accounts/my-account-identifier/memberships/my-individual-identifier removes an existing Individual-Account membership. ","srcFilePath":"src/pages/docs/accounts/index.md","id":"accounts","location":"/docs/accounts/","url":"/docs/accounts/"},"activities":{"title":"Activities","description":"Activities API","layout":"guide","icon":"hammer","weight":10,"content":" {$page.description} The Activity Model Activities contain information about behaviour and actions performed by different entities (individuals, accounts, individual segments... etc). The entity activity contains the following fields: identifier day startTime endTime groupName description activityType applicationId eventId object ownerType - The entity that performed this activity (e.g. an Individual, an Account...) ownerIdentifier - The Identifier of the entity that performed this activity. The entity object contains the following fields: identifier name description objectType url Activities Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as activities pointing to the collection of Activities. This API supports pagination, sorting, transformations, and filtering. The response will contain inside the _embedded section, a list of activities under the key activities. This is an example of a response to this url: http://localhost:8084/my-project/activities?page=0&size=1 { \"_embedded\": { \"activities\": [ { \"groupName\": \"www.liferay.com\", \"description\": \"Submit Form\", \"ownerIdentifier\": \"AWIubFositjEuNSqYpR\", \"ownerType\": \"individual\", \"activityType\": \"Activity\", \"day\": \"2018-03-06T00:00:00Z\", \"startTime\": \"2018-03-06T03:50:43Z\", \"endTime\": \"2018-03-06T03:50:43Z\", \"identifier\": \"AWIubHEhitjEuNSqYph\", \"applictionId\": \"Form\", \"eventId\": \"formSubmited\", \"eventProperties\": { \"formId\": \"32cf039a-7a47-4461-82c5-e694d9f29057\" }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/activities/AWIubHEhitjEuNSqYph\" }, \"individual\": { \"href\": \"http://localhost:8084/my-project/individuals/AWIubFositjEuNSqYpR\" } } } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/activities?page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Activities or Update of Activities manually is not supported. Activities are automatically generated and updated from the Activity Chunks sent by the different Connectors. Deletion of existing Activities is not allowed for now either. Navigating through the list of activities, the link to each activity can be found with the rel self. Transformations on Activities Collection Transformations can be applied on Activities collection as explained in transformations. The only transformation allowed for the Activities Collection is groupby by day, week or month. The number of intervals returned when groupby is used is determined by the page size. Only the page 0 can be requested. The returned object has the following fields: totalElements - The number of elements inside this interval intervalInitDate - The initial day of this interval These are some examples of transformations: Activities grouped by day of creation: ?apply=compute(day(dateRecorded) as day)/groupby((day))&page=0&size=3 This is an example of a response to this url: http://localhost:8084/my-project/activities?apply=compute(day(day) as computedDay)/groupby((computedDay))&page=0&size=3 { \"_embedded\": { \"activity-transformations\": [ { \"totalElements\": 0, \"intervalInitDate\": \"2018-05-20T00:00:00Z\" }, { \"totalElements\": 7, \"intervalInitDate\": \"2018-05-21T00:00:00Z\" }, { \"totalElements\": 4, \"intervalInitDate\": \"2018-05-22T00:00:00Z\" } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/activities?apply=compute%28day%28day%29%20as%20computedDay%29%2Fgroupby%28%28computedDay%29%29&page=0&size=3\" } }, \"page\": { \"size\": 3, \"totalElements\": 3, \"totalPages\": 1, \"number\": 0 } } Activities grouped by week of creation: ?apply=compute(week(day) as week)/groupby((week))&page=0&size=3 This is an example of a response to this url: http://localhost:8084/my-project/activities?apply=compute(week(dateRecorded) as week)/groupby((week))&page=0&size=3 { \"_embedded\": { \"activity-transformations\": [ { \"totalElements\": 0, \"intervalInitDate\": \"2018-06-04T00:00:00Z\" }, { \"totalElements\": 0, \"intervalInitDate\": \"2018-06-11T00:00:00Z\" }, { \"totalElements\": 4, \"intervalInitDate\": \"2018-06-18T00:00:00Z\" } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/activities?apply=compute%28week%28day%29%20as%20week%29%2Fgroupby%28%28week%29%29&page=0&size=3\" } }, \"page\": { \"size\": 3, \"totalElements\": 3, \"totalPages\": 1, \"number\": 0 } } ","srcFilePath":"src/pages/docs/activities/index.md","id":"activities","location":"/docs/activities/","url":"/docs/activities/"},"assets":{"title":"Assets","description":"Assets API","layout":"guide","icon":"streams","weight":11,"content":" {$page.description} The Asset Model Assets contain information about documents, pages, forms or any content that the individual interacts with. The entity asset contains the following fields: identifier assetType - e.g. forms, DocumentLibrary, Layout... dataSourceAssetPK - The primary key of this asset in its original data source dataSourceIdentifier - The identifier of the data source that sent this asset name description Assets Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as assets pointing to the collection of Assets. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of assets under the key assets. This is an example of a response to this url: http://localhost:8084/my-project/assets?page=0&size=1 { \"_embedded\": { \"assets\": [ { \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/assets/AWNoD0uDeO0hdUWjxo\" }, \"assets\": { \"href\": \"http://localhost:8084/my-project/assets{?filter,page,size,sort*}\" } }, \"name\": \"Liferay: Digital experience software tailored to your needs\", \"dataSourceAssetPK\": \"https://www.liferay.com/\", \"identifier\": \"AWNoD0uDeO0hdUWjxo\", \"dataSourceIdentifier\": \"AWNoD0HTeO0_hdUWjxoo\", \"assetType\": \"Layout\" } ] }, \"_links\": { \"first\": { \"href\": \"http://localhost:8084/my-project/assets?page=0&size=1\" }, \"self\": { \"href\": \"http://localhost:8084/my-project/assets?page=0&size=1\" }, \"next\": { \"href\": \"http://localhost:8084/my-project/assets?page=1&size=1\" }, \"last\": { \"href\": \"http://localhost:8084/my-project/assets?page=1&size=1\" } }, \"page\": { \"size\": 1, \"totalElements\": 2, \"totalPages\": 2, \"number\": 0 } } Creation of new Assets or Update of Assets manually is not supported. Assets are automatically generated and updated from the Activity Chunks sent by the different Connectors. Deletion of existing Assets is not allowed for now either. Navigating through the list of assets, the link to each asset can be found with the rel self. ","srcFilePath":"src/pages/docs/assets/index.md","id":"assets","location":"/docs/assets/","url":"/docs/assets/"},"datasources":{"title":"Data Sources","description":"Data Sources API","layout":"guide","icon":"database","weight":2,"content":" {$page.description} The Data Source Model DataSources support a subset of the Type DataFeed from Schema.org The following fields are currently supported: about author identifier name dateCreated dateModified identifier lastConfigChange - contains information about the configuration associated to this Data Source. transactionId - identifies the latest configuration operation status - the status of the latest configuration operation. Possible values are: SENT - the configuration has been sent by the Data Source, but no confirmation has been received OK_RECEIVED - the configuration has been sent by the Data Source, and a confirmation that been received with no errors. ERROR_RECEIVED - the configuration has been sent by the Data Source, and a confirmation that been received with errors. Your administrator can use the transactionId to track the error on the log files. name provider type - See the DataSource Provider section for more details url subjectOf - An event about this Data Source name startDate endDate location sameAs - the URL of the Event DataSources Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as data-sources pointing to the collection of Data Sources. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of data sources under the key data-sources. This is an example of a response to this url: http://localhost:8084/my-project/data-sources?page=0&size=1 { \"_embedded\": { \"data-sources\": [ { \"dateCreated\": \"2017-09-14T12:00:04Z\", \"dateModified\": \"2017-09-14T12:00:04Z\", \"identifier\": \"AV6AQqVHWUV1yhbro9xD\", \"lastConfigChange\": { \"transactionId\": \"AWJzfSDgdgFFtKdpvGBL\", \"status\": \"SENT\" }, \"name\": \"my Liferay 6.2\", \"provider\": { \"type\": \"CSV\" }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/data-sources/AV6AQqVHWUV1yhbro9xD\" }, \"data-sources\": { \"href\": \"http://localhost:8084/my-project/data-sources\" } } } ] }, \"_links\": { \"first\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=0&size=1\" }, \"self\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=0&size=1\" }, \"next\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=1&size=1\" }, \"last\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=1&size=1\" } }, \"page\": { \"size\": 1, \"totalElements\": 2, \"totalPages\": 2, \"number\": 0 } } Creation of new Data Sources is supported making a POST to the Collection URL. This is an example of the body passed to this POST request: { \"name\" : \"My First DataSource\", \"provider\" : { \"type\" : \"CSV\" }, \"author\" : { \"name\" : \"Shinn\", \"identifier\" : \"ABC1234\" } } Navigating through the list of entities, the link to each entity can be found with the rel self. That same url can be also used for delete (DELETE method) and update (PUT method). DataSource Provider The provider field of the DataSource contains the specific configuration for a provider (e.g. Liferay, CSV). As this information changes from one type of provider to other, the set of fields is different, too. A valid DataSource provider field must contain at least a field type with one of the supported types as values. Currently, the supported values are LIFERAY and CSV. Liferay DataSource Provider The following fields are supported for a Liferay Provider: type - the value must be LIFERAY for a Liferay Provider analyticsConfiguration - Contains the analytics configuration for the DataSource analyticsKey enableAllSites - If the value is true, all the sites in the instance will send analytics, ignoring the configuration in the sites field. sites - A list elements with the structure: enableAllChildren - If the value is true, all the children of this site will send analytics identifier - The primary key of the site contactsConfiguration - Contains the contacts configuration for the DataSource enableAllContacts - If the value is true, all the contacts in the instance will be synchronized, ignoring the configuration in the organizations and userGroups fields. organizations - A list elements with the structure: enableAllChildren - If the value is true, all the contacts in the children of this organization will be synchronized identifier - The primary key of the organization userGroups - A list elements with the structure: enableAllChildren - If the value is true, all the contacts in the children of this user group will be synchronized identifier - The primary key of the user group instanceInfo - Contacts information about the Liferay Portal instance companyId lcsInstallationId This is an example of the body passed to the POST request to create a DataSource with a provider field of type Liferay: { \"name\" : \"Liferay Intranet DataSource\", \"provider\" : { \"analyticsConfiguration\" : { \"analyticsKey\" : \"My-Key-For-Analytics\", \"enableAllSites\" : false, \"sites\" : [ { \"enableAllChildren\" : true, \"identifier\" : \"1\" } ] }, \"contactsConfiguration\" : { \"enableAllContacts\" : false, \"organizations\" : [ { \"enableAllChildren\" : true, \"identifier\" : \"2\" }, { \"enableAllChildren\" : false, \"identifier\" : \"3\" } ], \"userGroups\" : [ { \"enableAllChildren\" : false, \"identifier\" : \"4\" } ] }, \"instanceInfo\" : { \"companyId\" : \"1\", \"lcsInstallationId\" : \"1\" }, \"type\" : \"LIFERAY\" }, \"author\" : { \"name\" : \"Shinn\", \"identifier\" : \"ABC1234\" } } ","srcFilePath":"src/pages/docs/datasources/index.md","id":"datasources","location":"/docs/datasources/","url":"/docs/datasources/"},"field_mappings":{"title":"Field Mappings","description":"Field Mappings API","layout":"guide","icon":"download","weight":5,"content":" {$page.description} The Field Mapping Model Field Mappings allow us to map the fields from the different datasources to the fields in our entities (individuals, Accounts... etc) The following fields are currently supported in a field mapping: context - the context of the field (demographics, sentiment... etc) dataSourceFieldNames - a map with the name of the original field for each Data Source. e.g. liferay -- phone salesforce -- tel dateCreated dateModified fieldName - the name of the field on our model fieldType - a property from schema.org associated to this field mapping. e.g. telephone (http://schema.org/telephone) identifier author identifier name strategy - the strategy used to map fields. For example, we could decide to use always the most recent value of a field, or give preference to the value from a specific data source. See more details below. Field Mappings Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as field-mappings pointing to the collection of Field Mappings. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of fields under the key field-mappings. This is an example of a response to this url: http://localhost:8084/my-project/field-mappings?page=0&size=1 { \"_embedded\": { \"field-mappings\": [ { \"context\": \"demographics\", \"dataSourceFieldNames\": { \"liferayAV-0-c14MMBozrmZ0T_\": \"age\", \"salesforce_AV-0-c4v4MMBozrmZ0UA\": \"years\" }, \"dateCreated\": \"2017-11-13T10:43:11Z\", \"dateModified\": \"2017-11-13T10:43:11Z\", \"fieldName\": \"age\", \"fieldType\": \"http://schema.org/age\", \"identifier\": \"AV-0-dAM4MMBozrmZ0UD\", \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/field-mappings/AV-0-dAM4MMBozrmZ0UD\" }, \"field-mappings\": { \"href\": \"http://localhost:8084/my-project/field-mappings{?filter}\", \"templated\": true } } } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/field-mappings?page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Field Mappings is supported making a POST to the Collection URL. This is an example of the body passed to this POST request: { \"context\": \"demographics\", \"dataSourceFieldNames\": { \"AV-0-c14MMBozrmZ0T\": \"age\", \"AV-0-c4v4MMBozrmZ0UA\": \"years\" }, \"fieldName\": \"age\", \"fieldType\": \"http://schema.org/age\" } Navigating through the list of entities, the link to each entity can be found with the rel self. That same url can be also used for delete (DELETE method) and update (PUT method). Adding new data Source Field Names without having to update the full field mapping is also supported using the PATCH method to an entity link. The body must contain a Data Source Field Name object, wich contains the following fields: dataSourceIdentifier - the identifier of an existing datasource. fieldName - the name of this field in the existing data source This is an example of the body to patch an existing Field Mapping in order to add another data source field name: { \"dataSourceIdentifier\" : \"AV-0-c1_4MMBozrmZ0B\", \"fieldName\" : \"years-old\" } Field Mappings Strategies Field Mapping Strategies have the following fields: key - the stratey key. Supported values are: \"MOSTRECENT\" and \"PRIORITYDATASOURCE\" configuration - A map with the specific configuration for the strategy. e.g. Most Recent doesn't need any configuration. However, Priority DataSource requires the value dataSourceIdentifier. Most Recent Strategy This strategy will add to the user fields the most recent field coming from any data source. For example, if we have two data sources set up and a field mapping configured to obtain the email address from both. If we only receive the email from one of them, that is the field that will be added to the individual profile. However, if we receive both, then the one which we received the latest will be the one added to the individual profile. This is an example of a valid strategy passed in JSON when creating or updating a field mapping to use the most recent field: { \"key\": \"MOST_RECENT\" } Priority Data Source Strategy This strategy will give preference to the information coming from a particular data source. In order to be configured, the configuration must include the dataSourceIdentifier. For example, if we have three data sources set up (A, B and C), and a field mapping configured to obtain the telephone from all of them. When we set A as the priority data source, if we receive a telephone field from A, then that will be the field added to the inidividual profile. In case we don't receive any telephone from A, but we do receive it from B and C, then the most recent strategy applies. And this is an example setting the data source with identifier ABCEDFG as the priority data source. { \"key\": \"PRIORITY_DATASOURCE\", \"configuration\": { \"dataSourceIdentifier\": \"ABCDEFG\" } } ","srcFilePath":"src/pages/docs/field_mappings/index.md","id":"field_mappings","location":"/docs/field_mappings/","url":"/docs/field_mappings/"},"field_names":{"title":"Field Names","description":"Field Names API","layout":"guide","icon":"filter","weight":4,"content":" {$page.description} The Field Names Sometimes, in order to choose an existing field mapping to map your own data, you may want to find the most appropriate field considering the information you have. This service will help you with that considering the following information: Existing fields with the same or similar name of your label Previous field mappings from your label to other fields Fields with values similar to your new values Fields Names Service As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as field-names pointing to the endpoint for obtaining the field names. This endpoint accepts the GET method with the following parameters: label - the label from your field (e.g. telephone, email addres... etc) ownerType - the type of entity your are mapping (individual, account...) values - array of sample values from your field The response will contain a list of existing field names ordered by relevance. This is an example of a response to this url: http://localhost:8084/my-project/field-names?ownerType=individual&label=phone [\"telephone\", \"faxNumber\", \"globalLocationNumber\"] ","srcFilePath":"src/pages/docs/field_names/index.md","id":"field_names","location":"/docs/field_names/","url":"/docs/field_names/"},"fields":{"title":"Fields","description":"Fields API","layout":"guide","icon":"menu","weight":3,"content":" {$page.description} The Field Model Fields contain information about different entities (individuals, accounts, individual segments... etc). All the different values in time for a field are stored as fields themeshelves. Therefore, if the field Address for an Individual changed 5 times, we will have 5 fields for the Address for that particular Individual. The entity field contains the following fields: identifier context - The context of the field. Some examples are demographics or interests dataSourceIdentifier - The identifier of the (datasource that provided this information dateModified fieldType - A schema.org property label name value ownerType - The entity that owns this field (e.g. an Individual, an Account...) ownerIdentifier - The Identifier of the entity that owns this field. In addition, the following two fields are returned within the entity field but they cannot be used for filtering nor sorting. dataSourceName - The name of the (datasource that provided this information sourceName - The name of the original field in the Data Source Fields Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as fields pointing to the collection of Fields. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of fields under the key fields. This is an example of a response to this url: http://localhost:8084/my-project/fields?page=0&size=1 { \"_embedded\": { \"fields\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-0-c14MMBozrmZ0T\", \"dateModified\": \"2017-11-13T10:43:13Z\", \"fieldType\": \"http://schema.org/telephone\", \"identifier\": \"AV-0-deU4MMBozrmZ0UO\", \"label\": \"home\", \"name\": \"telephone\", \"ownerIdentifier\": \"AV-0-dcI4MMBozrmZ0UM\", \"ownerType\": \"individual\", \"value\": \"+34699001234\", \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/fields/AV-0-deU4MMBozrmZ0UO\" }, \"individual\": { \"href\": \"http://localhost:8084/my-project/individuals/AV-0-dcI4MMBozrmZ0UM\" }, \"fields\": { \"href\": \"http://localhost:8084/my-project/fields{?filter}\", \"templated\": true } } } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/fields?page=0&size=1\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Fields or Update of Fields manually is not supported. Fields are automatically generated and updated from the Field Chunks sent by the different Connectors. Deletion of existing Fields is not allowed for now either. Navigating through the list of fields, the link to each field can be found with the rel self. Retrieving historical values Fields store the historical values of properties of other resources, such as Individuals (e.g. demographics fields, topics of interests) or Individual Segments (e.g. member count, topics of interests). These values can be obtained by using the filtering option in the Field Collection with the ownerType and ownerIdentifier corresponding to the original resource. These are some examples of Fields filtering to retrieve historical values of certain Individual and Individual Segment properties: The historical values of the address for an Individual: ((context eq 'demographics') and (name eq 'address') and (ownerType eq 'individual') and (ownerIdentifier eq 'the-individual-identifier')) The historical counts of members of an Individual Segment: ((name eq 'individualCount') and (ownerType eq 'individual-segment') and (ownerIdentifier eq 'the-individual-segment-identifier')) ","srcFilePath":"src/pages/docs/fields/index.md","id":"fields","location":"/docs/fields/","url":"/docs/fields/"},"general":{"children":{"authentication":{"title":"Authentication","description":"Any request to this API will have to be signed, otherwise you will receive a 401 error response.","layout":"guide","weight":2,"content":" {$page.description} Authentication Headers In order to have a signed request, it must contain the following http headers: timestamp: the timestamp of the request in milliseconds apikey: your client key for accessing this API (ask for one to the Pulpo Team) signature: your request signed. In order to sign your request, you can use the SignatureGenerator utility to obtain this signature. Signature Generation You can use the following gradle dependency to use the SignatureValidator.java utility: provided group: \"com.liferay.osb.pulpo\", name: \"com.liferay.osb.pulpo.engine.contacts.security.signature\", version: \"0.0.1-20180508.134750-15\" In order to obtain the signature for your request, you can use one of the following methods: SignatureGenerator.getSignature(HttpServletRequest request, String private key) This will be helpful if you already have the request object. It must contain the timestamp and api key headers. If for any reason, you don't have access to the request, you can use the following method: SignatureGenerator.getSignature(String requestURL, Map parameters, String apiKey, String timeStamp, String privateKey) The request URL must be the same URL you are making your request to (it may include url parameters as well) The parameters map must contain the parameters of the body of your request (if any) The timestamp must match the value in your timestamp header The api key must match your api key header too. In both methods, you are expected to pass the private key you received associated to your api key. If you don't pass any private key, it will automatically look for the system variable PULPOPRIVATEKEY, therefore, you can just set this variable and don't pass any privateKey to the method. This is an example of how the request headers could look like: \"GET /DEMO/accounts?filter=(organization/isicV4/value eq 'G1252') HTTP/1.1\" header: \"Accept: */*\" header: \"apikey: MY-API-KEY\" header: \"timestamp: 1517245158236\" header: \"signature: MC0C1234-ew5bytvbSxebxAhUAg57SDhuBIGmJkS45zo\" Signatures are unique to each combination of url, params and headers, therefore they need to be generated for each request, they can't be reused. This is an example of how to generate the signature for a POST request: *1) Include the api key Header in your request header: \"apikey: MY-API-KEY\" *2) Include the timestamp Header in your request header: \"timestamp: 1517245158236\" (e.g. System.currentTimeMillis() in Java) *3) Obtain the Signature. If we had the http request, we would just call SignatureGenerator.getSignature(HttpServletRequest request), and include that as a third header: header: \"signature: (result of the previous call)\" *3b) In case you didn't have the http request, we would call: SignatureGenerator.getSignature(String requestURL, Map parameters, String apiKey, String timeStamp, String privateKey) with these values: requestURL -- /DEMO/accounts?filter=(organization/isicV4/value eq 'G1252') parameters -- empty apikey -- the same value from the header timeStamp -- the same value from the header privateKey -- the private key associated to our api key Another example of a POST request with body parameters: requestURL -- /DEMO/datasources parameters -- Map with the parameters: { \"name\" : [\"My DataSource\"], \"url\" : [\"My DataSource URL\"] } apikey -- the same value from the header timeStamp -- the same value from the header privateKey -- the private key associated to our api key ","srcFilePath":"src/pages/docs/general/authentication.md","id":"authentication","location":"/docs/general/authentication.html","url":"/docs/general/authentication.html"},"java_client":{"title":"Java Client","description":"You can use this Java client to consume the API from Java Code.","layout":"guide","weight":4,"content":" {$page.description} Pulpo provides a Java Client that allows you to consume this API inspired by the Traverson JavaScript library This client will help you navigate the API leveraging its hypermedia capabilities. Java API In case you want to use your own client, you will still find valuable our models in Java. You can use our API with this gradle dependency: provided group: \"com.liferay.osb.pulpo\", name: \"com.liferay.osb.pulpo.engine.contacts.api\", version: \"0.0.2-20180515.101145-15\" Set Up In order to use the Client, you should have this gradle dependency: provided group: \"com.liferay.osb.pulpo\", name: \"com.liferay.osb.pulpo.engine.contacts.client\", version: \"0.0.1-20180427.224113-32\" In case you need also the transitive dependencies, you should add: compileInclude group: \"com.eclipsesource.minimal-json\", name: \"minimal-json\", version: \"0.9.4\" compileInclude group: \"com.fasterxml.jackson.core\", name: \"jackson-annotations\", version: \"2.6.3\" compileInclude group: \"com.fasterxml.jackson.core\", name: \"jackson-core\", version: \"2.6.3\" compileInclude group: \"com.fasterxml.jackson.core\", name: \"jackson-databind\", version: \"2.6.3\" compileInclude group: \"com.github.javafaker\", name: \"javafaker\", version: \"0.13\" compileInclude group: \"com.github.mifmif\", name: \"generex\", version: \"1.0.2\" compileInclude group: \"com.github.wnameless\", name: \"json-flattener\", version: \"0.4.1\" compileInclude group: \"com.liferay\", name: \"com.liferay.petra.lang\", version: \"1.1.2\" compileInclude group: \"dk.brics.automaton\", name: \"automaton\", version: \"1.11.2\" compileInclude group: \"org.apache.commons\", name: \"commons-lang3\", version: \"3.5\" If you are using the client from an OSGI runtime, you may need to exclude some packages. See one example. Obtain the client You can obtain a Contacts Client instance using the ContactsClientFactory by pointing it to an engine URL and a ProjectID. ContactsEngineClient contactsEngineClient = ContactsEngineClientFactory.getClient( \"https://contacts-dev.liferay.com/\" \"MY-PROJECT-ID\"); You then go ahead and define the relation names you want to discover and follow. relation names can either be simple names or JSONPath expressions (starting with an $). Traversing the API Now, we will show some examples of how to traverse the API using the client. For example, to obtain the list of data sources, you could do: PagedResources pagedResources = contactsEngineClient.follow( ContactsEngineClient.DATA_SOURCES ).withTemplateParameters( contactsEngineClient.getDefaultTemplateParameters() ).toObject( new TypeReferences.PagedResourcesType() { } ); Collection dataSources = pagedResources.getContent(); Another example, to obtain just one datasource by the identifier: Map parameters = contactsEngineClient.getDefaultTemplateParameters(); parameters.put(ContactsEngineClient.IDENTIFIER, \"My-DataSource-Identifier\") DataSource dataSource = contactsEngineClient.follow( ContactsEngineClient.DATA_SOURCE ).withTemplateParameters( parameters ).toObject( DataSource.class ); Or one more, just to obtain the name of the datasource: Map parameters = contactsEngineClient.getDefaultTemplateParameters(); parameters.put(ContactsEngineClient.IDENTIFIER, \"My-DataSource-Identifier\") String dataSourceName = contactsEngineClient.follow( ContactsEngineClient.DATA_SOURCE ).withTemplateParameters( parameters ).toObject( '$.name' ); These samples hand a parameter map into the execution (withTemplateParameters). The parameters will be used to expand URIs found during the traversal that are templated (the projectId variable is already filled when you call contactsEngineClient.getDefaultTemplateParameters()). In the case of the last example, we evaluate a JSONPath expression to access the data source’s name. The examples listed above show a simple version of traversal with just one hop. A more complex example with several hops could look like this: Map parameters = contactsEngineClient.getDefaultTemplateParameters(); parameters.put(ContactsEngineClient.IDENTIFIER, \"My-Individual-Identifier\") String individualSegmentName = contactsEngineClient.follow( ContactsEngineClient.INDIVIDUAL, ContactsEngineClient.INDIVIDUAL_SEGMENTS ).withTemplateParameters( parameters ).toObject( '$.name' ); In this previous example, the follow method received 2 rels that will trigger 2 hops. At each hop, the same template parameters are applied. However, it could be customized at each hop: String individualSegmentName = contactsEngineClient .follow( Hop.rel(ContactsEngineClient.INDIVIDUAL).withParameter(\"identifier\", \"12345\")) ).follow( ContactsEngineClient.INDIVIDUAL_SEGMENTS ).follow( '$' + '.embedded.' + ContactsEngineClient.INDIVIDUALSEGMENTS + '[0]' ).withTemplateParameters( commonParameters ).toObject( '$.name' ); The Hop.rel(String rel​) function is a convenient way to create a single Hop. Using .withParameter(key, value) makes it simple to specify URI Template variables for just one hop. You can chain as many .withParameter() as needed or even pass a Map using .withParameter(Map). The follow() method is chainable, meaning you can string together multiple hops as shown above. You can either put multiple, simple string-based rels (follow(\"individuals\", \"individual-segments\")) or a single hop with specific parameters. Return Objects There are different types of objects you can retrieve from the API, and you can decide which one you want. For example, if you want to obtain just one object (DataSource, Individual...) you just need to specify it using the .toObject method. DataSource dataSource = contactsEngineClient.follow( ContactsEngineClient.DATA_SOURCE ).withTemplateParameters( parameters ).toObject( DataSource.class ); In some situations you may not only want the object, but the full \"Resource\" which contains the object and its links, then you can pass a new TypeReference to the toObject method: Resource dataSourceResource = contactsEngineClient.follow( ContactsEngineClient.DATA_SOURCE ).withTemplateParameters( parameters ).toObject( new TypeReferences.ResourceType() { } ); List links = dataSourceResource.getLinks(); String selfHref = dataSourceResource.getLink(\"self\").getHref(); DataSource dataSource = dataSourceResource.getContent(); You can also obtain more information about the HTTP Request doing toEntity. It will return the ResponseEntity of the type you especified. ResponseEntity dataSourceResponseEntity = contactsEngineClient.follow( ContactsEngineClient.DATA_SOURCES ).withTemplateParameters( contactsEngineClient.getDefaultTemplateParameters() ).toEntity( DataSource.class ); Assert.assertEquals(HttpStatus.OK, dataSourceResponseEntity.getStatusCode()); DataSource dataSource = dataSourceResponseEntity.getBody(); When working with collections, the server will return \"pages\" of entities which will help you paginate the collection. In this situation the you have similar options: if you want to obtain the list of objects (DataSource, Individual...) you just need to specify it passing an instance of TypeReferences.PagedResourcesType to the .toObject method. PagedResources pagedResources = _contactsEngineClient.follow( ContactsEngineClient.DATA_SOURCES ).withTemplateParameters( parameters ).toObject( new TypeReferences.PagedResourcesType() { } ) The PagedResources object will contain the \"Content\" with the DataSources, the \"metadata\" with information about the pagination and the \"links\" with links to other resources. For example: // Content Collection dataSources = pagedResources.getContent(); // MetaData PagedResources.PageMetadata metadata = pagedResources.getMetadata(); long totalElements = metadata.getTotalElements(); int pageSize = metadata.getSize(); // Links List links = pagedResources.getLinks(); String nextHref = pagedResources.getLink(\"next\").getHref(); When you want to obtain the \"page\" of \"Resources\" which contains the objects and its links, then you can pass an instance of TypeReferences.PagedResourcesType to the toObject method: PagedResources pagedResources = _contactsEngineClient.follow( ContactsEngineClient.DATA_SOURCES ).withTemplateParameters( parameters ).toObject( new TypeReferences.PagedResourcesType() {} ) // Content Collection dataSources = pagedResources.getContent() In this last example, the type of the Content was different, but the Metadata and Links were the same. Post, Put and Delete You can also use the client to create, update or delete entities. You first need to follow the relationships until the desired endpoint and then execute your method. For example, this would create a datasource: ResponseEntity dataSourceResponseEntity = contactsEngineClient.follow( ContactsEngineClient.DATA_SOURCES ).withTemplateParameters( contactsEngineClient.getDefaultTemplateParameters() ).post( getSampleDataSource(\"MY-DATASOURCE\"), MediaType.APPLICATIONJSON ).toEntity( DataSource.class ) Assert.assertEquals( HttpStatus.OK, dataSourceResponseEntity.getStatusCode()) DataSource createdDataSource = dataSourceResponseEntity.getBody() This would update a DataSource: Map parameters = contactsEngineClient.getDefaultTemplateParameters() parameters.put(IDENTIFIER, identifier) contactsEngineClient.follow( ContactsEngineClient.DATA_SOURCE ).withTemplateParameters( parameters ).put( dataSource, MediaType.APPLICATION_JSON ).toEntity( DataSource.class ) And this would delete a DataSource: Map parameters = contactsEngineClient.getDefaultTemplateParameters() parameters.put(IDENTIFIER, identifier) contactsEngineClient.follow( ContactsEngineClient.DATA_SOURCE ).withTemplateParameters( parameters ).delete( ).toEntity( DataSource.class ) All these examples can be found in github. ","srcFilePath":"src/pages/docs/general/java_client.md","id":"java_client","location":"/docs/general/java_client.html","url":"/docs/general/java_client.html"},"status_endpoints":{"title":"Status Endpoints","description":"The following endpoints can be queried to obtain information about the status of the engine.","layout":"guide","weight":3,"content":" {$page.description} API Health The health of the API can be checked at the endpoint: /management/health The response will be JSON in this format with posible statuses UP and DOWN: { \"description\":\"Pulpo Contacts Engine\", \"status\":\"UP\" } API Deployed Version The version of the API that is running can be checked at the endpoint: /management/info The response will be JSON in this format, with information relative to the branch deployed, the time it was built, the version of the API and the git commit: { \"branch\":\"PULPO-166.hateoas\", \"buildtime\":\"20180103T142812Z\", \"version\":\"1.0.0\", \"revision\":\"e015458b74a1378801c26d9eb5756c5a245d885d\" } ","srcFilePath":"src/pages/docs/general/status_endpoints.md","id":"status_endpoints","location":"/docs/general/status_endpoints.html","url":"/docs/general/status_endpoints.html"}},"title":"General","description":"General API","layout":"guide","icon":"star","weight":1,"content":" {$page.description} Authentication Any request to this API will have to be signed, otherwise you will receive a 401 error response. Learn more about how to authenticate your requests . Initial Navigation to obtain URLs URLs are not part of this API, they may change at any moment. URLs must be asked to the service before making any request. The URLs can be obtained making a request to the root resource of the Service /. The response in json HAL format will contain a _links object with the different template links to be used. For example: { \"name\": \"pulpo-api\", \"description\": \"API for consuming PULPO Services\", \"_links\": { \"self\": { \"href\": \"http://localhost:8084/\" }, \"data-sources\": { \"href\": \"http://localhost:8084/{projectId}/data-sources{?filter}\", \"templated\": true }, \"field-mappings\": { \"href\": \"http://localhost:8084/{projectId}/field-mappings{?filter}\", \"templated\": true }, \"fields\": { \"href\": \"http://localhost:8084/{projectId}/fields{?filter}\", \"templated\": true }, \"individuals\": { \"href\": \"http://localhost:8084/{projectId}/individuals{?filter}\", \"templated\": true }, \"individual-segments\": { \"href\": \"http://localhost:8084/{projectId}/individual-segments{?filter}\", \"templated\": true } } } The template URLs for managing collections such as Data Sources or Individuals can be found inside the section _links with the keys data-sources or individuals. (These keys are our API and they will never change). These template URLs allow us to build ULRs that can always be used to obtain the entities (GET method) and create new ones (POST method). (Note that not all collections support creation of new objects. e.g. Individuals API doesn't allow to create individuals directly). These template URLs need certain items to be replaced in order to have a valid URL: variables: {lb}parameterName{rb} They should be replaced with a value. e.g. The {lb}projectId{rb} item must be replaced with the projectId of the current proje`ct (such as \"my-project\"). parameters: {lb}?parameterName{rb} They should be replaced with a param and a value. e.g. The {lb}?filter{rb} item must be replaced with a filter parameter and as value a valid oData filter or with an empty string. (e.g. &filter=(name eq 'Jon')) Important: Optional parameters can be added at any time to these APIs, therefore, clients must consider that the templates may change with additional optional parameters (never with mandatory parameters). Navigating through a collection of entities, the link to each entity can be found with the rel self. That same url can be also used for delete (DELETE method) and update (PUT method). Pagination Every collection URL can be paginated using the optional params page and size. This is an example of a response to this url: http://localhost:8084/my-project/data-sources?page=0&size=1 { \"_embedded\": { \"data-sources\": [ { \"dateCreated\": \"2017-09-14T12:00:04Z\", \"dateModified\": \"2017-09-14T12:00:04Z\", \"identifier\": \"AV6AQqVHWUV1yhbro9xD\", \"name\": \"my Liferay 6.2\", \"provider\": { \"name\": \"liferay-de\" }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/data-sources/AV6AQqVHWUV1yhbro9xD\" }, \"data-sources\": { \"href\": \"http://localhost:8084/my-project/data-sources\" } } } ] }, \"_links\": { \"first\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=0&size=1\" }, \"self\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=0&size=1\" }, \"next\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=1&size=1\" }, \"last\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=1&size=1\" } }, \"page\": { \"size\": 1, \"totalElements\": 2, \"totalPages\": 2, \"number\": 0 } } From this response, you can obtain the total number of existing elements under the page block and also the links to other pages of data sources. Sorting Every collection URL can be sorted using the optional param sort. e.g. Given a url for a Collection (such as http://localhost:8084/my-project/data-sources) I could sort the results by name appending to the url ?sort=name In order to navigate inside the fields of an entity, you should use the separator / e.g. I could sort the results by the author name appending ?sort=author/name By default, the sorting is in ascending order. (0-1-A-Z). However, this can be changed adding desc after the parameter name separated with a comma. e.g. I could sort the results by name descending, appending to the url ?sort=name,desc I could also sort by more than one field, adding more than one sort parameter or separating the fields by commas. In this situation, the first parameter found is used to sort, and in case of coincidence, the next parameter in the list is used to sort and so on. e.g. I could sort the results by the name of the Provider, and in case of coincidence then order by the Date of creation appending this to the url: ?sort=provider/name,dateCreated If I want to change the order to descending for one of the fields, then I must used separated parameters in this way: ?sort=provider.name,desc&sort=dateCreated,asc Filtering Not all collections allow filtering. The ones that support it will contain the optional parameter {lb}?filter{rb} in their template. In order to filter a collection based on the value of one or more fields, you can use the optional parameter filter following a subset of the oData standard. Comparison Operators | Operator | Description | Example | |---------- |--------------------- |-------------------------------------| | eq | Equal | Address/City eq 'Redmond' | | | Equal null | Address/City eq null | | ne | Not equal | Address/City ne 'London' | | | Not null | Address/City ne null | | gt | Greater than | Price gt 20 | | ge | Greater than or equal| Price ge 10 | | lt | Less than | DateCreated lt 2018-02-13T12:33:12Z | | le | Less than or equal | DateCreated le 2012-05-29T09:13:28Z | Logical Operators | Operator | Description | Example | |---------- |------------ |------------------------------| |and|Logical and |Price le 200 and Price gt 3.5| |or |Logical or |Price le 3.5 or Price gt 200 | Grouping Operators | Operator | Description | Example | |---------- |------------ |------------------------------| |( ) |Precedence grouping |(Price eq 5) or (Address/City eq 'London') | String functions | Function | Description | Example | |---------- |------------ |------------------------------| | contains | Contains |contains(Address/City,'edmon')| |startswith |Starts with |startswith(Address/City,'Red')| |endswith |Ends with |endswith(Address/City,'mond') | e.g. We could append this to a URL that returns a collection of Data Sources to filter the DataSource by an author name and a name. ?filter=(author/name eq 'Julio') and (name ne 'datasource-name') Escaping in queries: In order to filter for a value which contains single quotes, these can be escaped by adding two single quotes. e.g. To filter for a company whose name is L'Oreal: ?filter=(company/name eq 'L''Oreal') Filtering by interests: Interests (of an individual or of a segment) may have values which can contain characters not supported by Odata as Identifiers, as described here: http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part3-csdl/odata-v4.0-errata03-os-part3-csdl-complete.html#_SimpleIdentifier For example an interest may have a value digital experience, but the following query would result in a parsing error: ?filter=(interests/digital experience/value gt 0) To support filtering by such interests, the identifier is modified, so that whitespace characters are replaced with _ and not alpha numeric characters are removed. In order to filter by interest digital experience the correct query would be: ?filter=(interests/digital_experience/value gt 0) Transformations Not all collections support transformations. The ones that support them will contain the optional parameter {lb}?apply{rb} in their template. In order to perform a transformation on a collection, you can use the optional parameter apply following a subset of the oData standard. Currently, the only supported transformation is groupby and within it, only Simple grouping on a single field is allowed. Depending on the data type of the grouping field, you may want to perform different kinds of aggregations. As of today, it is allowed to create aggregations by: term and interval date (day, week and month). Below it is explained how to use each of them. Supported Transformations | Transformation | Description | Transformation Supported | Example | |----------------|-----------------|------------------------------|--------------------------------------------------------| | groupby | Group by term | without transformation | groupby((demographics/address/value)) | | groupby | Group by day | with compute of day method | compute(day(dateRecorded) as day)/groupby((day)) | | groupby | Group by week | with compute of week method | compute(week(dateRecorded) as week)/groupby((week)) | | groupby | Group by month | with compute of month method | compute(month(dateRecorded) as month)/groupby((month)) | Expanding embedded Resources Not all collections support embedding resources. The ones that support them will contain the optional parameter {lb}?expand{rb} in their template. In addition, each embeddable resource will be named with a \"tag\", and those will be documented on each entity (e.g. Embedding Interests Aggregations inside an Interest). In order to embed certain resources on a collection, you can use the optional parameter expand following a list of the names of the resources to embed separated by commas. ","srcFilePath":"src/pages/docs/general/index.md","id":"general","location":"/docs/general/","url":"/docs/general/","childIds":["authentication","status_endpoints","java_client"]},"individual_segments":{"title":"Individual Segments","description":"Individual Segments API.","layout":"guide","icon":"persons","weight":7,"content":" {$page.description} The Individual Segment Model Individual Segments are aggregations of Individuals. These aggregations can be: Dynamic: A Variable set of individuals matching a certain condition (filter) belong to the Individual Segment. Static: A fixed set of individuals have been manually associated to the Individual Segment. The following fields are currently supported as part of an Individual Segment: author identifier name dateCreated dateModified filter - an oData filter that defines, for Individual Segments with segmentType=DYNAMIC, which Individuals belong to this Individual Segment filterMetadata - a placeholder for extra information about the filter identifier individualCount - the current count of individuals associated to the Individual Segment name - The name of the Individual Segment scope - The scope of the Individual Segment, whether this segment belongs to a user or is shared between the members of a project. The accepted values are USER and PROJECT. segmentType - defines if the Individual Segment aggregates Individuals dynamically or statically. The accepted values are STATIC and DYNAMIC status - defines if the Individual Segment accepts memberships or not. The accepted values are ACTIVE and INACTIVE Individual Segment Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as individual-segments pointing to the collection of Individual Segments. This API supports filtering, pagination and sorting. The response will contain inside the _embedded section, a list of individual segments under the key individual-segments. This is an example of a response to this url: http://localhost:8084/my-project/individual-segments?page=0&size=20 { \"_embedded\": { \"individual-segments\":[ { \"dateCreated\":\"2017-11-15T16:23:35Z\", \"dateModified\":\"2017-11-15T16:23:35Z\", \"filter\":null, \"filterMetadata\":null, \"identifier\":\"AV_Afi6-Y3UMLZEdmkBE\", \"name\":\"Friends\", \"segmentType\":\"STATIC\", \"status\":\"ACTIVE\", \"author\": { \"name\":\"John Doe\", \"identifier\":\"12345\" }, \"_links\":{ \"self\":{ \"href\":\"http://localhost:8084/my-project/individual-segments/AV_Afi6-Y3UMLZEdmkBE\" }, \"individual-segments\":{ \"href\":\"http://localhost:8084/my-project/individual-segments{?filter}\", \"templated\":true }, \"individuals\":{ \"href\":\"http://localhost:8084/my-project/individual-segments/AV_Afi6-Y3UMLZEdmkBE/individuals{?filter}\", \"templated\":true }, \"memberships\": { \"href\": \"http://localhost:8084/my-project/individual-segments/AV_81ueo7IU2hIVahEUv/memberships{?filter,page,size,sort*}\" }, \"membership-changes\": { \"href\": \"http://localhost:8084/my-project/individual-segments/AV_81ueo7IU2hIVahEUv/membership-changes{?filter,page,size,sort*}\" } } } ] }, \"_links\":{ \"self\":{ \"href\":\"http://localhost:8084/my-project/individual-segments?page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Individual Segments is supported making a POST to the Collection URL. This is an example of the body passed to this POST request: { \"name\" : \"My First IndividualSegment\", \"filter\" : \"(demographics/age/value eq '30')\", \"segmentType\" : \"DYNAMIC\" } Navigating through the list of entities, the link to each entity can be found with the rel self. That same url can be also used for delete (DELETE method) and update (PUT method). Filtering and Sorting Individual Segments Collection These are some examples of filtering: Individual Segments that belong to a user with identifier 123456: ?filter=((scope eq 'USER') and (author/identifier eq '123456'') Individual Segments modified after a certain date: ?filter=(datemodified gt 2018-02-13T12:33:12Z) Individual Segment Links As part of the links of each individual segment, the following links can be found using these keys: individual-segments - The collection of Individual Segments individuals - The collection of Individuals who belong to this Individual Segment. This collection can be filtered as explained in filtering, and transformations can be applied on it as explained in transformations. memberships - The collection of Memberships of this Individual Segment. This collection can be used to add new members to this individual segment manually, as described in Individual Segment Membership Collection. membership-changes - The collection of Membership Changes of this Individual Segment. This collection can be used to track changes in the memberships, as described in Individual Segment Membership Change Collection. The Individual Segment Membership Model Individual Segment Memberships represent associations of Individuals to Individual Segments. The following fields are currently supported as part of an Individual Segment: individualSegmentIdentifier - The identifier of the Individual Segment individualIdentifier - The identifier of the Individual status - The status of the membership. Its value can be ACTIVE if the individual is still a member, or INACTIVE if the individual is no longer a member. dateCreated - The date when the membership was established, in ISO8601 format dateRemoved - The date when the the individual stopped being a member (membership was deactivated), in ISO8601 format Individual Segment Membership Collection As described in Individual Segment Links, the _links section of the individual-segment resource will contain a template link labelled as memberships pointing to the collection of Memberships of this Individual Segment. This API supports filtering, pagination and sorting. The response will contain inside the _embedded section, a list of individual segment memberships under the key memberships. This is an example of a response of a GET request to this url: http://localhost:8084/my-project/individual-segments/my-individual-segment-identifier/memberships?page=0&size=20 { \"_embedded\": { \"memberships\": [ { \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/individual-segments/my-individual-segment-identifier/memberships/AWONINaxjx1K64tMzvV6\" }, \"individual\": { \"href\": \"http://localhost:8084/my-project/individuals/AWONINaxjx1K64tMzvV6\" }, \"individual-segment\": { \"href\": \"http://localhost:8084/my-project/individual-segments/my-individual-segment-identifier\" } }, \"individualSegmentIdentifier\": \"my-individual-segment-identifier\", \"status\": \"ACTIVE\", \"dateCreated\": \"2018-05-23T13:12:10Z\", \"individualIdentifier\": \"AWONINaxjx1K64tMzvV6\" }, { \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/individual-segments/my-individual-segment-identifier/memberships/AWONINdEjx1K64tMzvWB\" }, \"individual\": { \"href\": \"http://localhost:8084/my-project/individuals/AWONINdEjx1K64tMzvWB\" }, \"individual-segment\": { \"href\": \"http://localhost:8084/my-project/individual-segments/my-individual-segment-identifier\" } }, \"individualSegmentIdentifier\": \"my-individual-segment-identifier\", \"status\": \"INACTIVE\", \"dateRemoved\": \"2018-05-23T13:12:10Z\", \"dateCreated\": \"2018-05-23T13:12:10Z\", \"individualIdentifier\": \"AWONINdEjx1K64tMzvWB\" } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/individual-segments/my-individual-segment-identifier/memberships?page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 2, \"totalPages\": 1, \"number\": 0 } } Creation of new Individual Segment Memberships is supported only for Individual Segments with status=ACTIVE and segmentType=STATIC by making a POST to the memberships Collection URL of each individual segment . This is an example of the body passed to this POST request to the URL http://localhost:8084/my-project/individual-segments/my-individual-segment-identifier/memberships { \"individualIdentifier\" : \"my-individual-identifier\" } A DELETE request to the URL http://localhost:8084/my-project/individual-segments/my-individual-segment-identifier/memberships/my-individual-identifier deactivates an existing Individual Segment Membership. Filtering the Individual Segment Membership Collection These are some examples of filtering: Individual Segment Memberships with active status created before a given date: ?filter=(status eq 'ACTIVE') and (dateCreated lt 2013-05-29T09:13:28Z) Individual Segment Memberships with inactive status removed between two given dates: ?filter=(status eq 'INACTIVE') and (dateCreated gt 2012-05-29T09:13:28Z) and (dateCreated lt 2015-05-29T09:13:28Z) Individual Segment Membership Count The current value of the count of Individuals that are members of an Individual Segment can be obtained from the individualCount field of the individual-segment resource. The historical values of the count of Individuals that are members of an Individual Segment are stored as Fields and they can be obtained through the filtering options as described in the Retrieving historical values section. The Individual Segment Membership Change Model Individual Segment Memberships Changes represent a log with the changes in the memberships of an Individual for an Individual Segment. The following fields are currently supported as part of an Individual Segment: individualSegmentIdentifier - The identifier of the Individual Segment individualIdentifier - The identifier of the Individual individualName - The name of the Individual individualEmail - The email of the Individual individualsCount - The number of Individuals who are members at this point in time operation - The status of the membership. Its value can be ADDED if the membership was created, or REMOVED if the membership was deleted. dateChanged - The date when the membership was changed, in ISO8601 format dateFirst - The date when the membership was created, in ISO8601 format Individual Segment Membership Change Collection As described in Individual Segment Links, the _links section of the individual-segment resource will contain a template link labelled as membership-changes pointing to the collection of Memberships Changes of this Individual Segment. (There is also a shortcut in the root endpoint) This API supports pagination, sorting, filtering and transformations. The response will contain inside the _embedded section, a list of individual segment memberships under the key membership-changes. This is an example of a response of a GET request to this url: http://localhost:8084/my-project/individual-segments/my-individual-segment-identifier/membership-changes?page=0&size=20 { \"_embedded\": { \"membership-changes\": [ { \"_links\": { \"individual\": { \"href\": \"http://localhost:8084/my-project-id/individuals/AWOWMtxI7k1UGopTvFDB\" }, \"individual-segment\": { \"href\": \"http://localhost:8084/my-project-id/individual-segments/my-individual-segment-identifier\" }, \"membership\": { \"href\": \"http://localhost:8084/my-project-id/individual-segments/my-individual-segment-identifier/memberships/AWOWMtxI7k1UGopTvFDB\" } }, \"operation\": \"REMOVED\", \"individualIdentifier\": \"AWOWMtxI7k1UGopTvFDB\", \"dateChanged\": \"2018-05-25T07:28:26Z\", \"dateFirst\": \"2018-05-25T07:28:26Z\", \"individualSegmentIdentifier\": \"my-individual-segment-identifier\" }, { \"_links\": { \"individual\": { \"href\": \"http://localhost:8084/my-project-id/individuals/AWOWMtxI7k1UGopTvFDB\" }, \"individual-segment\": { \"href\": \"http://localhost:8084/my-project-id/individual-segments/my-individual-segment-identifier\" }, \"membership\": { \"href\": \"http://localhost:8084/my-project-id/individual-segments/my-individual-segment-identifier/memberships/AWOWMtxI7k1UGopTvFDB\" } }, \"operation\": \"ADDED\", \"individualIdentifier\": \"AWOWMtxI7k1UGopTvFDB\", \"dateChanged\": \"2018-05-25T07:28:26Z\", \"dateFirst\": \"2018-05-25T07:28:26Z\", \"individualSegmentIdentifier\": \"my-individual-segment-identifier\" }, { \"_links\": { \"individual\": { \"href\": \"http://localhost:8084/my-project-id/individuals/AWOWMtks7k1UGopTvFC5\" }, \"individual-segment\": { \"href\": \"http://localhost:8084/my-project-id/individual-segments/my-individual-segment-identifier\" }, \"membership\": { \"href\": \"http://localhost:8084/my-project-id/individual-segments/my-individual-segment-identifier/memberships/AWOWMtks7k1UGopTvFC5\" } }, \"operation\": \"ADDED\", \"individualIdentifier\": \"AWOWMtks7k1UGopTvFC5\", \"dateChanged\": \"2018-05-25T07:28:26Z\", \"dateFirst\": \"2018-05-25T07:28:26Z\", \"individualSegmentIdentifier\": \"my-individual-segment-identifier\" } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project-id/individual-segments/my-individual-segment-identifier/membership-changes?page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 3, \"totalPages\": 1, \"number\": 0 } } Filtering the Individual Segment Membership Change Collection These are some examples of filtering: Individual Segment Membership Changes that changed with operation ADDED before a given date: ?filter=(operation eq 'ADDED') and (dateChanged lt 2013-05-29T09:13:28Z) Individual Segment Memberships Changes that changed with operation REMOVED between two given dates: ?filter=(status eq 'REMOVED') and (dateChanged gt 2012-05-29T09:13:28Z) and (dateChanged lt 2015-05-29T09:13:28Z) Transformations on Individual Segment Membership Changes Transformations can be applied on Individual Segment Membership Changes collection as explained in transformations. The only transformation allowed for the Interest Collection is groupby by day, week or month. The number of intervals returned when groupby is used is determined by the page size. Only the page 0 can be requested. The returned object has the following fields: individualsCount - The number of individuals who are members of the segment in the last day of this interval addedIndividualsCount - The number of individuals that were added to the segment on this interval (memberhips added) removedIndividualsCount - The number of individuals that were added to the segment on this interval (memberships deactivated) initIntervalDate - The initial day of this interval These are some examples of transformations: Individual Segment Membership Changes grouped by day: ?apply=compute(day(dateChanged) as day)/groupby((day))&page=0&size=3 This is an example of a response to this url: http://localhost:8084/my-project/individual-segments/AWOrHarmQtrdjzlpsSr_/membership-changes?apply=compute(day(dateChanged) as day)/groupby((day))&page=0&size=3 { \"_embedded\": { \"membership-changes-transformations\": [ { \"individualsCount\": 110, \"initIntervalDate\": \"2018-05-26T00:00:00Z\", \"addedIndividualsCount\": 10, \"removedIndividualsCount\": 0 }, { \"individualsCount\": 120, \"initIntervalDate\": \"2018-05-27T00:00:00Z\", \"addedIndividualsCount\": 25, \"removedIndividualsCount\": 15 }, { \"individualsCount\": 150, \"initIntervalDate\": \"2018-05-28T00:00:00Z\", \"addedIndividualsCount\": 50, \"removedIndividualsCount\": 20 } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/individual-segments/AWOrHarmQtrdjzlpsSr_/membership-changes?apply=compute%28day%28dateChanged%29%20as%20day%29%2Fgroupby%28%28day%29%29&page=0&size=3\" } }, \"page\": { \"size\": 3, \"totalElements\": 3, \"totalPages\": 1, \"number\": 0 } } Individual Segment Membership Changes grouped by month: ?apply=compute(month(dateRecorded) as month)/groupby((month))&page=0&size=3 This is an example of a response to this url: http://localhost:8084/my-project/individual-segments/AWOrHarmQtrdjzlpsSr_/membership-changes?apply=compute(month(dateChanged) as month)/groupby((month))&page=0&size=3 { \"_embedded\": { \"membership-changes-transformations\": [ { \"individualsCount\": 0, \"initIntervalDate\": \"2018-03-01T00:00:00Z\", \"addedIndividualsCount\": 0, \"removedIndividualsCount\": 0 }, { \"individualsCount\": 150, \"initIntervalDate\": \"2018-04-01T00:00:00Z\", \"addedIndividualsCount\": 150, \"removedIndividualsCount\": 0 }, { \"individualsCount\": 120, \"initIntervalDate\": \"2018-05-01T00:00:00Z\", \"addedIndividualsCount\": 20, \"removedIndividualsCount\": 50 } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/individual-segments/AWOrHarmQtrdjzlpsSr_/membership-changes?apply=compute%28month%28dateChanged%29%20as%20month%29%2Fgroupby%28%28month%29%29&page=0&size=3\" } }, \"page\": { \"size\": 3, \"totalElements\": 3, \"totalPages\": 1, \"number\": 0 } } ","srcFilePath":"src/pages/docs/individual_segments/index.md","id":"individual_segments","location":"/docs/individual_segments/","url":"/docs/individual_segments/"},"individuals":{"title":"Individuals","description":"Individuals API.","layout":"guide","icon":"person","weight":6,"content":" {$page.description} The Individual Model Individuals are a complex entity that contain several contexts for each Person stored in our system. Those contexts are: Identity & Demographics Topics of Interest Sentiment Analysis Event Attendance Sales Interaction Social Engagement Transactions Browsing Activity Firmographic Support Interaction etc Only some of those contexts are available for now. Each context will contain certain Fields with information. These fields will correspond to schema.org Properties The following fields are currently supported as part of an Invididual: dataSourceIndividualPKs - a map with the different datasource identifiers as keys and the primary keys of this individual in each datasource. Potentially, an individual could be the aggregation of several users in one datasource. dateCreated dateModified identifier demographics - a Map of identity & demographic Fields corresponding to properties of the Type Person from Schema.org interests - a Map of interest Fields Individuals Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as individuals pointing to the collection of Individuals. This API supports pagination, sorting, filtering and transformations. The response will contain inside the _embedded section, a list of individuals under the key individuals. This is an example of a response to this url: http://localhost:8084/my-project/individuals?page=0&size=20 { \"_embedded\": { \"individuals\": [ { \"dateCreated\": \"2017-11-13T11:47:43Z\", \"dateModified\": \"2017-11-13T11:47:44Z\", \"demographics\": { \"address\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-1NOAPDh9K2u0PkWnD\", \"dateModified\": null, \"fieldType\": \"http://schema.org/address\", \"identifier\": null, \"individualIdentifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"label\": null, \"name\": \"address\", \"projectId\": \"my-project\", \"value\": \"125 Main Street, Candelaria\" } ], \"telephone\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-1NN9zDh9K2u0PkWnC\", \"dateModified\": null, \"fieldType\": \"http://schema.org/telephone\", \"identifier\": null, \"individualIdentifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"label\": \"home\", \"name\": \"telephone\", \"projectId\": \"my-project\", \"value\": \"+34699001234\" } ], \"email\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-1NOAPDh9K2u0PkWnD\", \"dateModified\": null, \"fieldType\": \"http://schema.org/email\", \"identifier\": null, \"individualIdentifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"label\": null, \"name\": \"email\", \"projectId\": \"my-project\", \"value\": \"cris@liferay.com\" } ], \"age\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-1NN9zDh9K2u0PkWnC\", \"dateModified\": null, \"fieldType\": \"http://schema.org/age\", \"identifier\": null, \"individualIdentifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"label\": null, \"name\": \"age\", \"projectId\": \"my-project\", \"value\": \"32\" } ] }, \"identifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"interests\": { \"digital experiences\": [ { \"ownerIdentifier\": \"AWJEx5uAxvlVqtdUeNi\", \"dataSourceIdentifier\": \"AWI0f2q_9uZvuIRBN3\", \"fieldType\": \"http://schema.org/Number\", \"ownerType\": \"individual\", \"context\": \"interests\", \"name\": \"digital experiences\", \"value\": \"7.601294274664403\", \"dateModified\": \"2018-03-27T10:57:37+0000\", \"label\": null, \"identifier\": \"AWJnGyoj8HyMTOCFNH\" } ], \"modern portals\": [ { \"ownerIdentifier\": \"AWJEx5uAxvlVqtdUeNi\", \"dataSourceIdentifier\": \"AWI0f2q_9uZvuIRBN3\", \"fieldType\": \"http://schema.org/Number\", \"ownerType\": \"individual\", \"context\": \"interests\", \"name\": \"modern portals\", \"value\": \"49.39764376820623\", \"dateModified\": \"2018-03-27T10:57:37+0000\", \"label\": null, \"identifier\": \"AWJnGzAj8HyMTOCFNIC\" } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/individuals/AV-1NOYHDh9K2u0PkWnL\" }, \"individuals\": { \"href\": \"http://localhost:8084/my-project/individuals{?filter}\", \"templated\": true }, \"individual-segments\": { \"href\": \"http://localhost:8084/my-project/individuals/AV-1NOYHDh9K2u0PkWnL/individual-segments\" } } } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/individuals?page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Individuals or Update of Individuals manually is not supported. Indivuals are automatically generated and updated from the Field Chunks sent by the different Connectors. Deletion of existing Individuals is not allowed for now either. Navigating through the list of individuals, the link to each individual can be found with the rel self. Filtering and Sorting Individuals Collection Individuals collection can be filtered as explained in filtering. These are some examples of filtering: Individuals from Madrid: ?filter=(demographics/city/value eq 'Madrid') Individuals under 30 years old: ?filter=(demographics/age/value lt '30') Individuals from Madrid sorted by age in descending order:?filter=(demographics/city/value eq 'Madrid')&sort=demographics/age/value,desc Individuals who work as Engineers from Malaga or Madrid under 40 years old:?filter=(demographics/city/value eq 'Madrid' or demographics/city/value eq 'Malaga') and (demographics/age/value lt '30') and (demographics/jobTitle/value eq 'Engineer') Individuals who work as Engineers from Madrid with an interest for Liferay:?filter=(demographics/city/value eq 'Madrid' and demographics/jobTitle/value eq 'Engineer' and interests/liferay/value gt '0') Filtering Individuals by Activities You can obtain the individuals that performed an specific activity on a time interval. For example, for an activity with the key formsformSubmitted#32cf039a-7a47-4461-82c5-e694d9f29057 (i.e. submit a form with id 32cf039a-7a47-4461-82c5-e694d9f29057): Individuals that submitted the form today (between 00:00 and current time):?filter=(activities/today eq 'forms#formSubmitted#32cf039a-7a47-4461-82c5-e694d9f29057') Individuals that submitted the form yesterday:?filter=(activities/yesterday eq 'forms#formSubmitted#32cf039a-7a47-4461-82c5-e694d9f29057') Individuals that submitted the form within the last 7 days (excluding today):?filter=(activities/last7days eq 'forms#formSubmitted#32cf039a-7a47-4461-82c5-e694d9f29057') Individuals that submitted the form within the last 30 days (excluding today):?filter=(activities/last30days eq 'forms#formSubmitted#32cf039a-7a47-4461-82c5-e694d9f29057') Individuals that submitted the form within the last 90 days (excluding today):?filter=(activities/last90days eq 'forms#formSubmitted#32cf039a-7a47-4461-82c5-e694d9f29057') Individuals that submitted the form within the last year (12 previous months):?filter=(activities/lastYear eq 'forms#formSubmitted#32cf039a-7a47-4461-82c5-e694d9f29057') Individuals that ever submitted the form: ?filter=(activities/ever eq 'forms#formSubmitted#32cf039a-7a47-4461-82c5-e694d9f29057') Filtering by activities can be combined with any of the aforementioned filters. Filtering Individuals by Segment Identifiers You can obtain the individuals that belong or do not belong to specific Individual Segments. For example, for Individual Segments with identifiers 32cf039a-7a47-4461-82c5-000000000001 and 32cf039a-7a47-4461-82c5-000000000002. Individuals that belong to the first segment:?filter=(individualSegmentIdentifiers eq '32cf039a-7a47-4461-82c5-000000000001') Individuals that do not belong to the first segment:?filter=(individualSegmentIdentifiers ne '32cf039a-7a47-4461-82c5-000000000001') Individuals that belong to the first segment and not to the second segment:?filter=(individualSegmentIdentifiers eq '32cf039a-7a47-4461-82c5-000000000001' and individualSegmentIdentifiers ne '32cf039a-7a47-4461-82c5-000000000002') Filtering by Individual Segments can be combined with any of the aforementioned filters. Transformations on Individuals Collection Transformations can be applied on Individuals collection as explained in transformations. The only transformation allowed for the Individuals Collection is groupby by a field value. These are some examples of transformations: Individuals grouped by address: ?apply=groupby((demographics/address/value)) This is an example of a response to this url: http://localhost:8084/my-project/individuals?apply=groupby((demographics/address/value))page=0&size=20 { \"_embedded\": { \"individual-transformations\": [ { \"totalElements\": 1, \"terms\": { \"demographics/address/value\": \"candelaria\" }, \"_links\": { \"individuals\": { \"href\": \"http://localhost:8084/DEMO/individuals?filter=(demographics/address/value%20eq%20%27candelaria%27){&page,size,sort*}\" } } }, { \"totalElements\": 2, \"terms\": { \"demographics/address/value\": \"malaga\" }, \"_links\": { \"individuals\": { \"href\": \"http://localhost:8084/DEMO/individuals?filter=(demographics/address/value%20eq%20%27malaga%27){&page,size,sort*}\" } } } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/DEMO/individuals?apply=groupby((demographics/address/value))&page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 2, \"totalPages\": 1, \"number\": 0 } } Aggregations of individuals by a field are by default sorted by the number of individuals grouped (aggregations with a higher number of individuals first), but they can also be ordered by the value of the field used to group by (See sorting). These are some examples of valid sortings: ?sort=demographics/address/value ?sort=demographics/jobTitle/value,desc Individual Segments As part of the links of each individual, the following links can be found using these keys: individual-segments - The collection of Individual Segments this individual belongs to individuals - The collection of Individuals Embedded Resources on an Individual Collection The expand parameter can be used when retrieving a Collection of Individuals as explained in embedding resources. The supported resources that can be embedded inside each individual resource are: data-sources - The Data Sources contributing information to Fields belonging to the Individual individual-segments - The Individual Segments the individual belongs to Creating Individuals Individuals are not created using the REST API. Dependending on the data source, the individuals should be created differently: Creating Individuals from Liferay DataSource To send Users from a Liferay Server to Pulpo, you need to have a LCS configured environment and also you should install the following OSGi modules to your Liferay Server: com.liferay.pulpo:com.liferay.pulpo.connector.de.contacts.api com.liferay.pulpo:com.liferay.pulpo.connector.de.contacts.impl If the installation is OK, every time a User is stored/changed in the DB, all the information related with this User will be sent to the Pulpo engine. How to add extra information to the User To Serialize custom fields of the User, you just need to register a CustomFieldSerializer OSGI service. Where: getCustomField: in this method you should return the object that contains the extra information of the user. getCustomFieldClass: in this method you should return the class of the object returned by getCustomField. getCustomFieldName: name that will be used to serialize the object returned by getCustomField. writeAsString: serialization of the object return by getCustomField as a valid JSON Object. This is an example of a implementation of CustomFieldSerializer. @Component(immediate = true, service = CustomFieldSerializer.class) public class CustomFieldExampleSerializer implements CustomFieldSerializer { @Override public CustomFieldExample getCustomField(User user) { ... } @Override public Class getCustomFieldClass() { ... } @Override public String getCustomFieldName(){ ... } @Override public String writeAsString(T object){ ... } } Creating Individuals from a CSV DataSource csvpulpo/individualchunkadd - The queue to write messages to when creating individuals via CSV import. `` may be one of dev, pre or prod. The messages written to this queue, are expected to have the following format: { \"projectId\" : \"\" \"dataSourceIdentifier\" : \"\" \"individualSegmentIdentifiers\" : \"\" \"fields\" : { \"name\" : \"value\" ... } } Where: projectId is your LCS projectId. dataSourceIdentifier is your DataSource identifier. individualSegmentIdentifiers is a optional field and should be a JSON array of one or several individualSegmentIdentifiers. fields is a optional field and should be a JSON object where each pair name/value should be mapped as columnName/columnValue. ","srcFilePath":"src/pages/docs/individuals/index.md","id":"individuals","location":"/docs/individuals/","url":"/docs/individuals/"},"interests":{"title":"Interests","description":"Interests API","layout":"guide","icon":"circle-arrow","weight":12,"content":" {$page.description} The Interest Model Interests contain information about diffferent topics that other entities (individuals, individual segments... etc) are interested on . Each Interest represent certain interest of an entity about a topic for a certain day. Interests are calculated using a 30 day window range, therefore, even when there is a score calculated for every day, that score takes into account the previuos 30 days. The interest field contains the following fields: identifier dateRecorded - The date this score was calculated name - The name of the topic score - The score for this topic (the higher the most interested on this topic) ownerType - The entity that owns this field (e.g. an Individual, an Account...) ownerIdentifier - The Identifier of the entity that owns this field. pagesVisited - A list of pageVisit that justifies this interest. Each pageVisit has the following fields: url - url of the page title - title of the page description - description of the page uniqueVisitsCount - number of visits to this page Interests Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as interests pointing to the collection of Interests. This API supports pagination, sorting, filtering transformations, and embedding resources. The response will contain inside the _embedded section, a list of interests under the key interests. This is an example of a response to this url: http://localhost:8084/my-project/interests?page=0&size=1 { \"_embedded\": { \"interests\": [ { \"dateRecorded\": \"2018-03-05T00:00:00+0000\", \"identifier\": \"AWMYbBfSgcT3bCtqgwde\", \"name\": \"intranets\", \"score\": 1.0986122886681098, \"ownerIdentifier\": \"AV-0-dcI4MMBozrmZ0UM\", \"ownerType\": \"individual\", \"pagesVisited\": [ { \"title\": \"Products for Liferay\", \"uniqueVisitsCount\": 1, \"description\": \"Liferay DXP, Liferay De, Sync...\", \"url\": \"https://www.liferay.com/products\" }, { \"title\": \"Liferay Digital Experience Platform\", \"uniqueVisitsCount\": 5, \"description\": \"Portals, Intranets, Platforms...\", \"url\": \"https://www.liferay.com/en/home\" } ], \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/interests/AWMYbBfSgcT3bCtqgwde\" }, \"individual\": { \"href\": \"http://localhost:8084/my-project/individuals/AV-0-dcI4MMBozrmZ0UM\" }, \"interests\": { \"href\": \"http://localhost:8084/my-project/interests{?filter}\", \"templated\": true } } } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/interests?page=0&size=1\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Interests or Update of Interests manually is not supported. Interests are automatically generated and updated from the Interst Chunks sent by the algorithms used to calculate this based on the Analytics data. Deletion of existing Interests is not allowed for now either. Navigating through the list of interests, the link to each interest can be found with the rel self, and also a link to the entity owning it with the rel of the entity (e.g. individual or individual-segment). Retrieving historical values for a specific topic of interest Obtaining the historical value of an interest can be done using using the filtering option in the Interest Collection. The ownerType and ownerIdentifier can be used to idenfity the entity interested and the name to obtain interests for just one topic. The sorting option can be used to obtain the interests by date for example. These are some examples of Interests filtering to retrieve historical values of certain Individual and Individual Segment properties: The historical values of the interests on \"portals\" for an Individual: ((name eq 'portals') and (ownerType eq 'individual') and (ownerIdentifier eq 'the-individual-identifier')) The historical values of the topic 'Business' for an Individual Segment: ((name eq 'business') and (ownerType eq 'individual-segment') and (ownerIdentifier eq 'the-individual-segment-identifier')) The historical values of the interest on \"intrantes\" with a score higher than 10 for any Individual: ((score gt '10') and (name eq 'intranets') and (ownerType eq 'individual')) Transformations on Interest Collection Transformations can be applied on Interests collection as explained in transformations. The only transformation allowed for the Interest Collection is groupby by day, week or month. The number of intervals returned when groupby is used is determined by the page size. Only the page 0 can be requested. The returned object has the following fields: totalElements - The number of elements inside this interval viewsSum - The sum of all the uniqueVisitsCount of each pageVisit of each Interest in the interval intervalInitDate - The initial day of this interval scoreAvg - The average score of all the interests in the interval These are some examples of transformations: Interests grouped by day of creation: ?apply=compute(day(dateRecorded) as day)/groupby((day))&page=0&size=3 This is an example of a response to this url: http://localhost:8084/my-project/interests?apply=compute(day(dateRecorded) as day)/groupby((day))&page=0&size=3 { \"_embedded\": { \"interest-transformations\": [ { \"totalElements\": 0, \"intervalInitDate\": \"2018-05-20T00:00:00Z\", \"scoreAvg\": 0.0, \"viewsSum\": 0 }, { \"totalElements\": 7, \"intervalInitDate\": \"2018-05-21T00:00:00Z\", \"scoreAvg\": 10.3, \"viewsSum\": 0 }, { \"totalElements\": 4, \"intervalInitDate\": \"2018-05-22T00:00:00Z\", \"scoreAvg\": 41.86, \"viewsSum\": 0 } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/interests?apply=compute%28day%28dateRecorded%29%20as%20day%29%2Fgroupby%28%28day%29%29&page=0&size=3\" } }, \"page\": { \"size\": 3, \"totalElements\": 3, \"totalPages\": 1, \"number\": 0 } } Interests grouped by month of creation: ?apply=compute(month(dateRecorded) as month)/groupby((month))&page=0&size=3 This is an example of a response to this url: http://localhost:8084/my-project/interests?apply=compute(month(dateRecorded) as month)/groupby((month))&page=0&size=3 { \"_embedded\": { \"interest-transformations\": [ { \"totalElements\": 0, \"intervalInitDate\": \"2018-03-01T00:00:00Z\", \"scoreAvg\": 0.0, \"viewsSum\": 0 }, { \"totalElements\": 0, \"intervalInitDate\": \"2018-04-01T00:00:00Z\", \"scoreAvg\": 0.0, \"viewsSum\": 0 }, { \"totalElements\": 4, \"intervalInitDate\": \"2018-05-01T00:00:00Z\", \"scoreAvg\": 41.86, \"viewsSum\": 0 } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/interests?apply=compute%28month%28dateRecorded%29%20as%20month%29%2Fgroupby%28%28month%29%29&page=0&size=3\" } }, \"page\": { \"size\": 3, \"totalElements\": 3, \"totalPages\": 1, \"number\": 0 } } Embedded Resources on Interest Collection The expand parameter can be used when retrieving a Collection of Interests as explained in embedding resources. The supported resources that can be embedded inside each interest resource are: interest-aggregation-last-30-days - The aggregation of the interest requested by day for the last 30 days interest-aggregation-last-60-days - The aggregation of the interest requested by day for the last 60 days interest-aggregation-last-90-days - The aggregation of the interest requested by day for the last 90 days ","srcFilePath":"src/pages/docs/interests/index.md","id":"interests","location":"/docs/interests/","url":"/docs/interests/"},"pages_visited":{"title":"Pages Visited","description":"Pages Visited API","layout":"guide","icon":"layout","weight":10,"content":" {$page.description} The Page Visited Model Pages Visited contain information about pages visited by different entities (individuals, accounts, individual segments... etc). The entity page visited contains the following fields: identifier day description - description of the page interestName - The name of the interest which the visit of this page contribute to justify ownerType - The entity that visit the page (e.g. an Individual, an Account...) ownerIdentifier - The Identifier of the entity that visit the page. title - title of the page uniqueVisitsCount - number of unique visits to this page url - url of the page Page Visited Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as pages-visited pointing to the collection of Pages Visited. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of pages visited under the key pages-visited. This is an example of a response to this url: http://localhost:8084/my-project/pages-visited/?page=0&size=1 { \"_embedded\": { \"pages-visited\": [ { \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/pages-visited/AWOx3B_0TvifCU95Sg6d\" }, \"interest\": { \"href\": \"http://localhost:8084/my-project/interests/AWOx3B_0TvifCU95Sg6d\" }, \"pages-visited\": { \"href\": \"http://localhost:8084/my-project/pages-visited{?filter,page,size,sort*}\" } }, \"url\": \"https://www.liferay.com/page1\", \"description\": \"This is Page 1\", \"title\": \"Page 1\", \"ownerIdentifier\": \"AWOx3BczTvifCU95Sg6G\", \"uniqueVisitsCount\": 2, \"day\": \"2018-04-12T00:00:00Z\", \"identifier\": \"AWOx3B_0TvifCU95Sg6d\", \"ownerType\": \"individual\", \"interestName\": \"open source sharepoint alternative\" } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/1527697379274/pages-visited/?page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 2, \"totalPages\": 1, \"number\": 0 } } Creation of new Pages Visited or Update of Page Visited manually is not supported. Pages Visited are automatically generated and updated from the Interest Chunks sent by the different Connectors. Deletion of existing Pages Visited is not allowed for now either. Navigating through the list of pages visited, the link to each page visited can be found with the rel self. ","srcFilePath":"src/pages/docs/pages_visited/index.md","id":"pages_visited","location":"/docs/pages_visited/","url":"/docs/pages_visited/"}},"childIds":["general","datasources","fields","field_names","field_mappings","individuals","individual_segments","accounts","account_segments","activities","pages_visited","assets","interests","search"]},"updates":{"title":"Updates","description":"Check out what's new","updates":[{"version":"0.0.6","major":false,"features":[{"icon":"layout","title":"Pages Visited are out!","description":"You can start using the Page Visited API!","url":"/docs/pages_visited/"}]},{"version":"0.0.5","major":false,"features":[{"icon":"persons","title":"Segments are out!","description":"You can start using the Indivual Segments API, and theAccounts Segment API!","url":"/docs/individual_segments/"}]},{"version":"0.0.4","major":false,"features":[{"icon":"org_chart","title":"Accounts API is out!","description":"You can start using the Accounts API now, and they support filtering, sorting and pagination!","url":"/docs/accounts/"}]},{"version":"0.0.3","major":false,"features":[{"icon":"person","title":"Individuals API is out!","description":"You can start using the Individuals API now, and they support filtering!","url":"/docs/individuals/"},{"icon":"hammer","title":"Pagination, Filtering and Sorting!","description":"Now supported in all collections.","url":"/docs/general/"}]},{"version":"0.0.2","major":false,"features":[{"icon":"menu","title":"Fields API is out!","description":"You can start using the Fields API now.","url":"/docs/fields/"},{"icon":"download","title":"Fields Mapping API is out!","description":"You can start using the Field Mappings API now.","url":"/docs/field_mappings/"}]},{"version":"0.0.1","major":false,"features":[{"icon":"database","title":"DataSources API is out!","description":"You can start using the Data Source API now.","url":"/docs/datasources"}]}],"content":" ","srcFilePath":"src/pages/updates/index.soy","id":"updates","location":"/updates/","url":"/updates/"}},"childIds":["docs","updates"]}}