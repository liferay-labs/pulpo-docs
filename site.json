{"title":"Pulpo","githubRepo":"liferay-labs","googleAnalytics":"UA-37033501-5","index":{"title":"Home","description":"We gather data, analyse it, process it and expose it for you as a beautiful API ","content":" Copyright © 2017 Liferay, Inc Powered by WeDeploy™ ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/./","children":{"docs":{"title":"APIS","description":"Everything you need to know to use the APIs.","content":" Docs Start learning how to leverage the power of . Choose an API All APIs follow a Restful approach with auto discovery. This will help ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","url":"/docs/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of . ","srcFilePath":"src/pages/docs/search.soy","id":"search","location":"/docs/search.html","url":"/docs/search.html"},"account_segments":{"title":"Account Segments","description":"Account Segments API.","layout":"guide","icon":"person-card","weight":8,"content":" {$page.description} The Account Segment Model Account Segments are aggregations of Accounts. These aggregations can be: Dynamic: A Variable set of accounts matching a certain condition (filter) belong to the Account Segment. Static: A fixed set of accounts have been manually associated to the Account Segment. The following fields are currently supported as part of an Account Segment: dateCreated dateModified filter - an oData filter that defines, for Account Segments with segmentType=DYNAMIC, which Accounts belong to this Account Segment identifier name - The name of the Account Segment segmentType - defines if the Account Segment aggregates Accounts dynamically or statically. The accepted values are Type.STATIC and Type.DYNAMIC Account Segment Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as account-segments pointing to the collection of Account Segments. This API supports pagination and sorting. The response will contain inside the _embedded section, a list of account segments under the key account-segments. This is an example of a response to this url: http://localhost:8084/my-project/account-segments?page=0&size=20 { \"_embedded\": { \"account-segments\":[ { \"dateCreated\":\"2017-11-15T16:23:35Z\", \"dateModified\":\"2017-11-15T16:23:35Z\", \"filter\":null, \"identifier\":\"AV_Afi6-Y3UMLZEdmkBE\", \"name\":\"Partners\", \"segmentType\":\"STATIC\", \"_links\":{ \"self\":{ \"href\":\"http://localhost:8084/my-project/account-segments/AV_Afi6-Y3UMLZEdmkBE\" }, \"account-segments\":{ \"href\":\"http://localhost:8084/my-project/account-segments{?filter}\", \"templated\":true }, \"accounts\":{ \"href\":\"http://localhost:8084/my-project/account-segments/AV_Afi6-Y3UMLZEdmkBE/accounts{?filter}\", \"templated\":true }, \"memberships\": { \"href\":\"http://localhost:8084/my-project/account-segments/AV_81uji7IU2hIVahEU6/memberships\" } } } ] }, \"_links\":{ \"self\":{ \"href\":\"http://localhost:8084/my-project/account-segments?page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Account Segments is supported making a POST to the Collection URL. This is an example of the body passed to this POST request: { \"name\" : \"My First AccountSegment\", \"filter\" : \"(organization/employees/value eq '30')\", \"segmentType\" : \"DYNAMIC\" } Navigating through the list of entities, the link to each entity can be found with the rel self. That same url can be also used for delete (DELETE method) and update (PUT method). Account Segment Links As part of the links of each account, the following links can be found using these keys: account-segments - The collection of Account Segments accounts - The collection of Accounts who belong to this Account Segment. This collection can be filtered as explained in filtering. memberships - The collection of Memberships of this Account Segment. This collection can be used to add new members to this account segment manually, as described in #4. Account Segment Membership Collection Creation of new Account-Account Segment memberships is supported only for Account Segments with segmentType=STATIC by making a POST to the memberships Collection URL of each account segment . This is an example of the body passed to this POST request to the URL http://localhost:8084/my-project/account-segments/my-account-segment-identifier/memberships { \"accountIdentifier\" : \"my-account-identifier\" } A DELETE request to the URL http://localhost:8084/my-project/account-segments/my-account-segment-identifier/memberships/my-account-identifier removes an existing Account-Account Segment membership. ","srcFilePath":"src/pages/docs/account_segments/index.md","id":"account_segments","location":"/docs/account_segments/","url":"/docs/account_segments/"},"accounts":{"title":"Accounts","description":"Accounts API.","layout":"guide","icon":"org_chart","weight":7,"content":" {$page.description} The Accounts Model Accounts are a complex entity that contain several contexts for each Organization stored in our system. Those contexts are: Organization Sentiment Analysis Sales Interaction Transactions Firmographic Support Interaction etc Only some of those contexts are available for now. Each context will contain certain Fields with information. These fields will correspond to schema.org Properties The following fields are currently supported as part of an Invididual: dataSourceIdentifiers - a map with the different datasource identifiers and the datasource individual identifier (the primary key of this account in the original datasource) dateCreated dateModified identifier organization - a Map of organizational Fields corresponding to properties of the Type Organization from Schema.org Accounts Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as accounts pointing to the collection of Accounts. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of accounts under the key accounts. This is an example of a response to this url: http://localhost:8084/my-project/accounts?page=0&size=1 { \"_embedded\": { \"accounts\": [ { \"dateCreated\": \"2017-11-14T15:32:06Z\", \"dateModified\": \"2017-11-14T15:32:07Z\", \"identifier\": \"AV-7KK2z2uFXwMzLKdBu\", \"organization\": { \"ISIC\": [ { \"context\": \"organization\", \"dataSourceIdentifier\": null, \"dateModified\": \"2017-11-14T15:32:07Z\", \"fieldType\": \"http://schema.org/isicV4\", \"label\": null, \"name\": \"Economic Activity\", \"ownerIdentifier\": \"AV-7KK2z2uFXwMzLKdBu\", \"ownerType\": \"account\", \"projectId\": \"DEMO\", \"value\": \"G762\" } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/accounts/AV-7KK2z2uFXwMzLKdBu\" }, \"accounts\": { \"href\": \"http://localhost:8084/my-project/accounts{?filter}\", \"templated\": true }, \"individuals\": { \"href\": \"http://localhost:8084/my-project/accounts/AV_Afi95Y3UMLZEdmkBK/individuals{?filter}\" }, \"memberships\": { \"href\": \"http://localhost:8084/my-project/accounts/AV_81uhW7IU2hIVahEU2/memberships\" }, \"account-segments\": { \"href\": \"http://localhost:8084/my-project/accounts/AV-7KK2z2uFXwMzLKdBu/account-segments{?filter}\", \"templated\": true } } } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/accounts?page=0&size=1\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Accounts or Update of Accounts manually is not supported. Accounts are automatically generated and updated from the Field Chunks sent by the different Connectors. Deletion of existing Accounts is not allowed for now either. Navigating through the list of accounts, the link to each account can be found with the rel self. Filtering and Sorting Accounts Collection Accounts collection can be filtered as explained in filtering. These are some examples of filtering: Accounts from Madrid: ?filter=(organization/location/value eq 'Madrid') Accounts with yearly revenue greater than 50000: ?filter=(organization/yearlyRevenue/value gt '50000') Accounts from Madrid sorted by yearlyRevenue in descending order:?filter=(organization/location/value eq 'Madrid')&sort=organization/yearlyRevenue/value,desc Accounts in the financial sector located either in Malaga or Madrid with a yearly revenue lower than 50000:?filter=(organization/location/value eq 'Madrid' or organization/location/value eq 'Malaga') and (organization/yearlyRevenue/value lt '50000') and (organization/isicV4/value eq 'K6419') Accounts Links As part of the links of each account, the following links can be found using these keys: account-segments - The collection of Account Segments this account belongs to accounts - The collection of Accounts individuals - The collection of Individuals who belong to this account. This collection can be filtered as explained in filtering. memberships - The collection of Memberships of this account. This collection can be used to add new members to this account manually, as described in 5. Accounts Membership Collection Creation of new Individual-Account memberships is supported making a POST to the memberships Collection URL of each account . This is an example of the body passed to this POST request to the URL http://localhost:8084/my-project/accounts/my-account-identifier/memberships { \"individualIdentifier\" : \"my-individual-identifier\" } A DELETE request to the URL http://localhost:8084/my-project/accounts/my-account-identifier/memberships/my-individual-identifier removes an existing Individual-Account membership. ","srcFilePath":"src/pages/docs/accounts/index.md","id":"accounts","location":"/docs/accounts/","url":"/docs/accounts/"},"datasources":{"title":"Data Sources","description":"Data Sources API","layout":"guide","icon":"database","weight":2,"content":" {$page.description} The Data Source Model DataSources support a subset of the Type DataFeed from Schema.org The following fields are currently supported: about author identifier name dateCreated dateModified identifier name provider name url subjectOf - An event about this Data Source name startDate endDate location sameAs - the URL of the Event DataSources Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as data-sources pointing to the collection of Data Sources. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of data sources under the key data-sources. This is an example of a response to this url: http://localhost:8084/my-project/data-sources?page=0&size=1 { \"_embedded\": { \"data-sources\": [ { \"dateCreated\": \"2017-09-14T12:00:04Z\", \"dateModified\": \"2017-09-14T12:00:04Z\", \"identifier\": \"AV6AQqVHWUV1yhbro9xD\", \"name\": \"my Liferay 6.2\", \"provider\": { \"name\": \"liferay-de\" }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/data-sources/AV6AQqVHWUV1yhbro9xD\" }, \"data-sources\": { \"href\": \"http://localhost:8084/my-project/data-sources\" } } } ] }, \"_links\": { \"first\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=0&size=1\" }, \"self\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=0&size=1\" }, \"next\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=1&size=1\" }, \"last\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=1&size=1\" } }, \"page\": { \"size\": 1, \"totalElements\": 2, \"totalPages\": 2, \"number\": 0 } } Creation of new Data Sources is supported making a POST to the Collection URL. This is an example of the body passed to this POST request: { \"name\" : \"My First DataSource\", \"provider\" : { \"name\" : \"liferay-de\" }, \"author\" : { \"name\" : \"Shinn\", \"identifier\" : \"ABC1234\" } } Navigating through the list of entities, the link to each entity can be found with the rel self. That same url can be also used for delete (DELETE method) and update (PUT method). ","srcFilePath":"src/pages/docs/datasources/index.md","id":"datasources","location":"/docs/datasources/","url":"/docs/datasources/"},"field_mappings":{"title":"Field Mappings","description":"Field Mappings API","layout":"guide","icon":"download","weight":4,"content":" {$page.description} The Field Mapping Model Field Mappings allow us to map the fields from the different datasources to the fields in our entities (individuals, Accounts... etc) The following fields are currently supported in a field mapping: context - the context of the field (demographics, sentiment... etc) dataSourceFieldNames - a map with the name of the original field for each Data Source. e.g. liferay -- phone salesforce -- tel dateCreated dateModified fieldName - the name of the field on our model fieldType - a property from schema.org associated to this field mapping. e.g. telephone (http://schema.org/telephone) identifier strategy - the strategy used to map fields. For example, we could decide to use always the most recent value of a field, or give preference to the value from a specific data source. See more details below. Field Mappings Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as field-mappings pointing to the collection of Field Mappings. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of fields under the key field-mappings. This is an example of a response to this url: http://localhost:8084/my-project/field-mappings?page=0&size=1 { \"_embedded\": { \"field-mappings\": [ { \"context\": \"demographics\", \"dataSourceFieldNames\": { \"liferayAV-0-c14MMBozrmZ0T_\": \"age\", \"salesforce_AV-0-c4v4MMBozrmZ0UA\": \"years\" }, \"dateCreated\": \"2017-11-13T10:43:11Z\", \"dateModified\": \"2017-11-13T10:43:11Z\", \"fieldName\": \"age\", \"fieldType\": \"http://schema.org/age\", \"identifier\": \"AV-0-dAM4MMBozrmZ0UD\", \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/field-mappings/AV-0-dAM4MMBozrmZ0UD\" }, \"field-mappings\": { \"href\": \"http://localhost:8084/my-project/field-mappings{?filter}\", \"templated\": true } } } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/field-mappings?page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Field Mappings is supported making a POST to the Collection URL. This is an example of the body passed to this POST request: { \"context\": \"demographics\", \"dataSourceFieldNames\": { \"AV-0-c14MMBozrmZ0T\": \"age\", \"AV-0-c4v4MMBozrmZ0UA\": \"years\" }, \"fieldName\": \"age\", \"fieldType\": \"http://schema.org/age\" } Navigating through the list of entities, the link to each entity can be found with the rel self. That same url can be also used for delete (DELETE method) and update (PUT method). Adding new data Source Field Names without having to update the full field mapping is also supported using the PATCH method to an entity link. The body must contain a Data Source Field Name object, wich contains the following fields: dataSourceIdentifier - the identifier of an existing datasource. fieldName - the name of this field in the existing data source This is an example of the body to patch an existing Field Mapping in order to add another data source field name: { \"dataSourceIdentifier\" : \"AV-0-c1_4MMBozrmZ0B\", \"fieldName\" : \"years-old\" } Field Mappings Strategies Field Mapping Strategies have the following fields: key - the stratey key. Supported values are: \"MOSTRECENT\" and \"PRIORITALDATASOURCE\" configuration - A map with the specific configuration for the strategy. e.g. Most Recent doesn't need any configuration. However, Priorital DataSource requires the value dataSourceIdentifier. This is an example of valid strategies passed in JSON when creating or udpating a field mapping: { \"key\": \"MOST_RECENT\" } { \"key\": \"PRIORITY_DATASOURCE\", \"configuration\": { \"dataSourceIdentifier\": \"ABCDEFG\" } } ","srcFilePath":"src/pages/docs/field_mappings/index.md","id":"field_mappings","location":"/docs/field_mappings/","url":"/docs/field_mappings/"},"fields":{"title":"Fields","description":"Fields API","layout":"guide","icon":"menu","weight":3,"content":" {$page.description} The Field Model Fields contain information about different entities (individuals, accounts, individual segments... etc). All the different values in time for a field are stored as fields themeshelves. Therefore, if the field Address for an Individual changed 5 times, we will have 5 fields for the Address for that particular Individual. The entity field contains the following fields: identifier context dataSourceIdentifier dateModified fieldType - A schema.org property label name value ownerType - The entity that owns this field (e.g. an Individual, an Individual Identifier...) ownerIdentifier - The Identifier of the entity that owns this field. Fields Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as fields pointing to the collection of Fields. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of fields under the key fields. This is an example of a response to this url: http://localhost:8084/my-project/fields?page=0&size=1 { \"_embedded\": { \"fields\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-0-c14MMBozrmZ0T\", \"dateModified\": \"2017-11-13T10:43:13Z\", \"fieldType\": \"http://schema.org/telephone\", \"identifier\": \"AV-0-deU4MMBozrmZ0UO\", \"label\": \"home\", \"name\": \"telephone\", \"ownerIdentifier\": \"AV-0-dcI4MMBozrmZ0UM\", \"ownerType\": \"individual\", \"value\": \"+34699001234\", \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/fields/AV-0-deU4MMBozrmZ0UO\" }, \"individual\": { \"href\": \"http://localhost:8084/my-project/individuals/AV-0-dcI4MMBozrmZ0UM\" }, \"fields\": { \"href\": \"http://localhost:8084/my-project/fields{?filter}\", \"templated\": true } } } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/fields?page=0&size=1\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Fields or Update of Fields manually is not supported. Fields are automatically generated and updated from the Field Chunks sent by the different Connectors. Deletion of existing Fields is not allowed for now either. Navigating through the list of fields, the link to each field can be found with the rel self. ","srcFilePath":"src/pages/docs/fields/index.md","id":"fields","location":"/docs/fields/","url":"/docs/fields/"},"general":{"title":"General","description":"General API","layout":"guide","icon":"star","weight":1,"content":" {$page.description} Initial Navigation to obtain URLs URLs are not part of this API, they may change at any moment. URLs must be asked to the service before making any request. The URLs can be obtained making a request to the root resource of the Service /. The response in json HAL format will contain a _links object with the different template links to be used. For example: { \"name\": \"pulpo-api\", \"description\": \"API for consuming PULPO Services\", \"_links\": { \"self\": { \"href\": \"http://localhost:8084/\" }, \"data-sources\": { \"href\": \"http://localhost:8084/{projectId}/data-sources{?filter}\", \"templated\": true }, \"field-mappings\": { \"href\": \"http://localhost:8084/{projectId}/field-mappings{?filter}\", \"templated\": true }, \"fields\": { \"href\": \"http://localhost:8084/{projectId}/fields{?filter}\", \"templated\": true }, \"individuals\": { \"href\": \"http://localhost:8084/{projectId}/individuals{?filter}\", \"templated\": true }, \"individual-segments\": { \"href\": \"http://localhost:8084/{projectId}/individual-segments{?filter}\", \"templated\": true } } } The template URLs for managing collections such as Data Sources or Individuals can be found inside the section _links with the keys data-sources or individuals. (These keys are our API and they will never change). These template URLs allow us to build ULRs that can always be used to obtain the entities (GET method) and create new ones (POST method). (Note that not all collections support creation of new objects. e.g. Individuals API doesn't allow to create individuals directly). These template URLs need certain items to be replaced in order to have a valid URL: variables: {lb}parameterName{rb} They should be replaced with a value. e.g. The {lb}projectId{rb} item must be replaced with the projectId of the current proje`ct (such as \"my-project\"). parameters: {lb}?parameterName{rb} They should be replaced with a param and a value. e.g. The {lb}?filter{rb} item must be replaced with a filter parameter and as value a valid oData filter or with an empty string. (e.g. &filter=(name eq 'Jon')) Important: Optional parameters can be added at any time to these APIs, therefore, clients must consider that the templates may change with additional optional parameters (never with mandatory parameters). Navigating through a collection of entities, the link to each entity can be found with the rel self. That same url can be also used for delete (DELETE method) and update (PUT method). Pagination Every collection URL can be paginated using the optional params page and size. This is an example of a response to this url: http://localhost:8084/my-project/data-sources?page=0&size=1 { \"_embedded\": { \"data-sources\": [ { \"dateCreated\": \"2017-09-14T12:00:04Z\", \"dateModified\": \"2017-09-14T12:00:04Z\", \"identifier\": \"AV6AQqVHWUV1yhbro9xD\", \"name\": \"my Liferay 6.2\", \"provider\": { \"name\": \"liferay-de\" }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/data-sources/AV6AQqVHWUV1yhbro9xD\" }, \"data-sources\": { \"href\": \"http://localhost:8084/my-project/data-sources\" } } } ] }, \"_links\": { \"first\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=0&size=1\" }, \"self\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=0&size=1\" }, \"next\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=1&size=1\" }, \"last\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=1&size=1\" } }, \"page\": { \"size\": 1, \"totalElements\": 2, \"totalPages\": 2, \"number\": 0 } } From this response, you can obtain the total number of existing elements under the page block and also the links to other pages of data sources. Sorting Every collection URL can be sorted using the optional param sort. e.g. Given a url for a Collection (such as http://localhost:8084/my-project/data-sources) I could sort the results by name appending to the url ?sort=name In order to navigate inside the fields of an entity, you should use the separator / e.g. I could sort the results by the author name appending ?sort=author/name By default, the sorting is in ascending order. (0-1-A-Z). However, this can be changed adding desc after the parameter name separated with a comma. e.g. I could sort the results by name descending, appending to the url ?sort=name,desc I could also sort by more than one field, adding more than one sort parameter or separating the fields by commas. In this situation, the first parameter found is used to sort, and in case of coincidence, the next parameter in the list is used to sort and so on. e.g. I could sort the results by the name of the Provider, and in case of coincidence then order by the Date of creation appending this to the url: ?sort=provider/name,dateCreated If I want to change the order to descending for one of the fields, then I must used separated parameters in this way: ?sort=provider.name,desc&sort=dateCreated,asc Filtering Not all collectons allow filtering. The ones that support it will contain the optional parameter {lb}?filter{rb} in their template. In order to filter a collection based on the value of one or more fields, you can use the optional parameter filter following a subset of the oData standard. Comparison Operators | Operator | Description | Example | |---------- |--------------------- |------------------------------| | eq | Equal | Address/City eq 'Redmond' | | | Equal null | Address/City eq null | | ne | Not equal | Address/City ne 'London' | | | Not null | Address/City ne null | | gt | Greater than | Price gt 20 | | ge | Greater than or equal| Price ge 10 | | lt | Less than | Price lt 20 | | le | Less than or equal | Price le 100 | Logical Operators | Operator | Description | Example | |---------- |------------ |------------------------------| |and|Logical and |Price le 200 and Price gt 3.5| |or |Logical or |Price le 3.5 or Price gt 200 | Grouping Operators | Operator | Description | Example | |---------- |------------ |------------------------------| |( ) |Precedence grouping |(Price eq 5) or (Address/City eq 'London') | String functions | Function | Description | Example | |---------- |------------ |------------------------------| | contains | Contains |contains(Address/City,'edmon')| |startswith |Starts with |startswith(Address/City,'Red')| |endswith |Ends with |endswith(Address/City,'mond') | e.g. We could append this to a URL that returns a collection of Data Sources to filter the DataSource by an author name and a name. ?filter=(author/name eq 'Julio') and (name ne 'datasource-name') ","srcFilePath":"src/pages/docs/general/index.md","id":"general","location":"/docs/general/","url":"/docs/general/"},"individual_segments":{"title":"Individual Segments","description":"Individual Segments API.","layout":"guide","icon":"persons","weight":6,"content":" {$page.description} The Individual Segment Model Individual Segments are aggregations of Individuals. These aggregations can be: Dynamic: A Variable set of individuals matching a certain condition (filter) belong to the Individual Segment. Static: A fixed set of individuals have been manually associated to the Individual Segment. The following fields are currently supported as part of an Individual Segment: author identifier name dateCreated dateModified fields - a Map of Fields corresponding to properties of the Individual Segment filter - an oData filter that defines, for Individual Segments with segmentType=DYNAMIC, which Individuals belong to this Individual Segment filterMetadata - a placeholder for extra information about the filter identifier name - The name of the Individual Segment segmentType - defines if the Individual Segment aggregates Individuals dynamically or statically. The accepted values are STATIC and DYNAMIC status - defines if the Individual Segment accepts memberships or not. The accepted values are ACTIVE and INACTIVE Individual Segment Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as individual-segments pointing to the collection of Individual Segments. This API supports pagination and sorting. The response will contain inside the _embedded section, a list of individual segments under the key individual-segments. This is an example of a response to this url: http://localhost:8084/my-project/individual-segments?page=0&size=20 { \"_embedded\": { \"individual-segments\":[ { \"dateCreated\":\"2017-11-15T16:23:35Z\", \"dateModified\":\"2017-11-15T16:23:35Z\", \"filter\":null, \"filterMetadata\":null, \"identifier\":\"AV_Afi6-Y3UMLZEdmkBE\", \"name\":\"Friends\", \"segmentType\":\"STATIC\", \"status\":\"ACTIVE\", \"author\": { \"name\":\"John Doe\", \"identifier\":\"12345\" }, \"fields\": { }, \"_links\":{ \"self\":{ \"href\":\"http://localhost:8084/my-project/individual-segments/AV_Afi6-Y3UMLZEdmkBE\" }, \"individual-segments\":{ \"href\":\"http://localhost:8084/my-project/individual-segments{?filter}\", \"templated\":true }, \"individuals\":{ \"href\":\"http://localhost:8084/my-project/individual-segments/AV_Afi6-Y3UMLZEdmkBE/individuals{?filter}\", \"templated\":true }, \"memberships\": { \"href\": \"http://localhost:8084/my-project/individual-segments/AV_81ueo7IU2hIVahEUv/memberships\" } } } ] }, \"_links\":{ \"self\":{ \"href\":\"http://localhost:8084/my-project/individual-segments?page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Individual Segments is supported making a POST to the Collection URL. This is an example of the body passed to this POST request: { \"name\" : \"My First IndividualSegment\", \"filter\" : \"(demographics/age/value eq '30')\", \"segmentType\" : \"DYNAMIC\" } Navigating through the list of entities, the link to each entity can be found with the rel self. That same url can be also used for delete (DELETE method) and update (PUT method). Individual Segment Links As part of the links of each individual, the following links can be found using these keys: individual-segments - The collection of Individual Segments individuals - The collection of Individuals who belong to this Individual Segment. This collection can be filtered as explained in filtering. memberships - The collection of Memberships of this Individual Segment. This collection can be used to add new members to this individual segment manually, as described in #4. Individual Segment Membership Collection Creation of new Individual-Individual Segment memberships is supported only for Individual Segments with status=ACTIVE and segmentType=STATIC by making a POST to the memberships Collection URL of each individual segment . This is an example of the body passed to this POST request to the URL http://localhost:8084/my-project/individual-segments/my-individual-segment-identifier/memberships { \"individualIdentifier\" : \"my-individual-identifier\" } A DELETE request to the URL http://localhost:8084/my-project/individual-segments/my-individual-segment-identifier/memberships/my-individual-identifier removes an existing Individual-Individual Segment membership. Individual Segment Membership Count The current value of the count of Individuals that are members of an Individual Segment can be obtained from the totalElements field of the individuals collection. The historical values of the count of Individuals that are members of an Individual Segment are stored as Fields with the name individualCount and associated to the Individual Segment through the ownerType and ownerIdentifier properties. For example, using the oData filter (name eq 'individualCount') and (ownerype eq 'individual-segment') and (ownerIdentifier eq 'AV_Afi6-Y3UMLZEdmkBE') returns a collection of fields with the historical count values for the Individual Segment with identifier AV_Afi6-Y3UMLZEdmkBE. ","srcFilePath":"src/pages/docs/individual_segments/index.md","id":"individual_segments","location":"/docs/individual_segments/","url":"/docs/individual_segments/"},"individuals":{"title":"Individuals","description":"Individuals API.","layout":"guide","icon":"person","weight":5,"content":" {$page.description} The Individual Model Individuals are a complex entity that contain several contexts for each Person stored in our system. Those contexts are: Identity & Demographics Sentiment Analysis Event Attendance Sales Interaction Social Engagement Transactions Browsing Activity Firmographic Support Interaction etc Only some of those contexts are available for now. Each context will contain certain Fields with information. These fields will correspond to schema.org Properties The following fields are currently supported as part of an Invididual: dataSourceIdentifiers - a map with the different datasource identifiers and the datasource individual identifier (the primary key of this individual in the original datasource) dateCreated dateModified identifier demographics - a Map of identity & demographic Fields corresponding to properties of the Type Person from Schema.org sentiment - a Map of sentiment analysis Fields Individuals Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as individuals pointing to the collection of Individuals. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of individuals under the key individuals. This is an example of a response to this url: http://localhost:8084/my-project/individuals?page=0&size=20 { \"_embedded\": { \"individuals\": [ { \"dateCreated\": \"2017-11-13T11:47:43Z\", \"dateModified\": \"2017-11-13T11:47:44Z\", \"demographics\": { \"address\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-1NOAPDh9K2u0PkWnD\", \"dateModified\": null, \"fieldType\": \"http://schema.org/address\", \"identifier\": null, \"individualIdentifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"label\": null, \"name\": \"address\", \"projectId\": \"my-project\", \"value\": \"125 Main Street, Candelaria\" } ], \"telephone\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-1NN9zDh9K2u0PkWnC\", \"dateModified\": null, \"fieldType\": \"http://schema.org/telephone\", \"identifier\": null, \"individualIdentifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"label\": \"home\", \"name\": \"telephone\", \"projectId\": \"my-project\", \"value\": \"+34699001234\" } ], \"email\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-1NOAPDh9K2u0PkWnD\", \"dateModified\": null, \"fieldType\": \"http://schema.org/email\", \"identifier\": null, \"individualIdentifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"label\": null, \"name\": \"email\", \"projectId\": \"my-project\", \"value\": \"cris@liferay.com\" } ], \"age\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-1NN9zDh9K2u0PkWnC\", \"dateModified\": null, \"fieldType\": \"http://schema.org/age\", \"identifier\": null, \"individualIdentifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"label\": null, \"name\": \"age\", \"projectId\": \"my-project\", \"value\": \"32\" } ] }, \"identifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"sentiment\": {}, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/individuals/AV-1NOYHDh9K2u0PkWnL\" }, \"individuals\": { \"href\": \"http://localhost:8084/my-project/individuals{?filter}\", \"templated\": true }, \"individual-segments\": { \"href\": \"http://localhost:8084/my-project/individuals/AV-1NOYHDh9K2u0PkWnL/individual-segments\" } } } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/individuals?page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Individuals or Update of Individuals manually is not supported. Indivuals are automatically generated and updated from the Field Chunks sent by the different Connectors. Deletion of existing Individuals is not allowed for now either. Navigating through the list of individuals, the link to each individual can be found with the rel self. Filtering and Sorting Individuals Collection Individuals collection can be filtered as explained in filtering. These are some examples of filtering: Individuals from Madrid: ?filter=(demographics/city/value eq 'Madrid') Individuals under 30 years old: ?filter=(demographics/age/value lt '30') Individuals from Madrid sorted by age in descending order:?filter=(demographics/city/value eq 'Madrid')&sort=demographics/age/value,desc Individuals who work as Engineers from Malaga or Madrid under 40 years old:?filter=(demographics/city/value eq 'Madrid' or demographics/city/value eq 'Malaga') and (demographics/age/value lt '30') and (demographics/jobTitle/value eq 'Engineer') Individual Segments As part of the links of each individual, the following links can be found using these keys: individual-segments - The collection of Individual Segments this individual belongs to individuals - The collection of Individuals ","srcFilePath":"src/pages/docs/individuals/index.md","id":"individuals","location":"/docs/individuals/","url":"/docs/individuals/"}},"childIds":["general","datasources","fields","field_mappings","individuals","individual_segments","accounts","account_segments","search"]},"updates":{"title":"Updates","description":"Check out what's new","updates":[{"version":"0.0.5","major":false,"features":[{"icon":"persons","title":"Segments are out!","description":"You can start using the Indivual Segments API, and theAccounts Segment API!","url":"/docs/individual_segments/"}]},{"version":"0.0.4","major":false,"features":[{"icon":"org_chart","title":"Accounts API is out!","description":"You can start using the Accounts API now, and they support filtering, sorting and pagination!","url":"/docs/accounts/"}]},{"version":"0.0.3","major":false,"features":[{"icon":"person","title":"Individuals API is out!","description":"You can start using the Individuals API now, and they support filtering!","url":"/docs/individuals/"},{"icon":"hammer","title":"Pagination, Filtering and Sorting!","description":"Now supported in all collections.","url":"/docs/general/"}]},{"version":"0.0.2","major":false,"features":[{"icon":"menu","title":"Fields API is out!","description":"You can start using the Fields API now.","url":"/docs/fields/"},{"icon":"download","title":"Fields Mapping API is out!","description":"You can start using the Field Mappings API now.","url":"/docs/field_mappings/"}]},{"version":"0.0.1","major":false,"features":[{"icon":"database","title":"DataSources API is out!","description":"You can start using the Data Source API now.","url":"/docs/datasources"}]}],"content":" ","srcFilePath":"src/pages/updates/index.soy","id":"updates","location":"/updates/","url":"/updates/"}},"childIds":["docs","updates"]}}