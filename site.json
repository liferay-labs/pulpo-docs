{"title":"Pulpo","githubRepo":"liferay-labs","googleAnalytics":"UA-37033501-5","index":{"title":"Home","description":"We gather data, analyse it, process it and expose it for you as a beautiful API ","content":" Copyright © 2017 Liferay, Inc Powered by WeDeploy™ ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/./","children":{"docs":{"title":"APIS","description":"Everything you need to know to use the APIs.","content":" Docs Start learning how to leverage the power of . Choose an API All APIs follow a Restful approach with auto discovery. This will help ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","url":"/docs/","children":{"search":{"title":"Search","description":"Find what you're looking for in the documentation.","hidden":true,"content":" Electric Docs Start learning how to leverage the power of . ","srcFilePath":"src/pages/docs/search.soy","id":"search","location":"/docs/search.html","url":"/docs/search.html"},"datasources":{"title":"Data Sources","description":"Data Sources API","layout":"guide","icon":"database","weight":3,"content":" {$page.description} The Data Source Model DataSources support a subset of the Type DataFeed from Schema.org The following fields are currently supported: about author identifier name dateCreated dateModified identifier name provider name url subjectOf - An event about this Data Source name startDate endDate location sameAs - the URL of the Event DataSources Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as data-sources pointing to the collection of Data Sources. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of data sources under the key data-sources. This is an example of a response to this url: http://localhost:8084/my-project/data-sources?page=0&size=1 { \"_embedded\": { \"data-sources\": [ { \"dateCreated\": \"2017-09-14T12:00:04Z\", \"dateModified\": \"2017-09-14T12:00:04Z\", \"identifier\": \"AV6AQqVHWUV1yhbro9xD\", \"name\": \"my Liferay 6.2\", \"provider\": { \"name\": \"liferay-de\" }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/data-sources/AV6AQqVHWUV1yhbro9xD\" }, \"data-sources\": { \"href\": \"http://localhost:8084/my-project/data-sources\" } } } ] }, \"_links\": { \"first\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=0&size=1\" }, \"self\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=0&size=1\" }, \"next\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=1&size=1\" }, \"last\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=1&size=1\" } }, \"page\": { \"size\": 1, \"totalElements\": 2, \"totalPages\": 2, \"number\": 0 } } Creation of new Data Sources is supported making a POST to the Collection URL. This is an example of the body passed to this POST request: { \"name\" : \"My First DataSource\", \"projectId\" : \"my-project\", \"provider\" : { \"name\" : \"liferay-de\" }, \"author\" : { \"name\" : \"Shinn\", \"identifier\" : \"ABC1234\" } } Navigating through the list of entities, the link to each entity can be found with the rel self. That same url can be also used for delete (DELETE method) and update (PUT method). ","srcFilePath":"src/pages/docs/datasources/index.md","id":"datasources","location":"/docs/datasources/","url":"/docs/datasources/"},"field_mappings":{"title":"Field Mappings","description":"Field Mappings API","layout":"guide","icon":"download","weight":5,"content":" {$page.description} The Field Mapping Model Field Mappings allow us to map the fields from the different datasources to the fields in our entities (individuals, Accounts... etc) The following fields are currently supported in a field mapping: context - the context of the field (demographics, sentiment... etc) dataSourceFieldNames - a map with the name of the original field for each Data Source. e.g. liferay -- phone salesforce -- tel dateCreated dateModified fieldName - the name of the field on our model fieldType - a property from schema.org associated to this field mapping. e.g. telephone (http://schema.org/telephone) identifier Field Mappings Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as field-mappings pointing to the collection of Field Mappings. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of fields under the key field-mappings. This is an example of a response to this url: http://localhost:8084/my-project/field-mappings?page=0&size=1 { \"_embedded\": { \"field-mappings\": [ { \"context\": \"demographics\", \"dataSourceFieldNames\": { \"liferayAV-0-c14MMBozrmZ0T_\": \"age\", \"salesforce_AV-0-c4v4MMBozrmZ0UA\": \"years\" }, \"dateCreated\": \"2017-11-13T10:43:11Z\", \"dateModified\": \"2017-11-13T10:43:11Z\", \"fieldName\": \"age\", \"fieldType\": \"http://schema.org/age\", \"identifier\": \"AV-0-dAM4MMBozrmZ0UD\", \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/field-mappings/AV-0-dAM4MMBozrmZ0UD\" }, \"field-mappings\": { \"href\": \"http://localhost:8084/my-project/field-mappings{?filter}\", \"templated\": true } } } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/field-mappings?page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Field Mappings is supported making a POST to the Collection URL. This is an example of the body passed to this POST request: { \"context\": \"demographics\", \"dataSourceFieldNames\": { \"AV-0-c14MMBozrmZ0T\": \"age\", \"AV-0-c4v4MMBozrmZ0UA\": \"years\" }, \"fieldName\": \"age\", \"fieldType\": \"http://schema.org/age\" } Navigating through the list of entities, the link to each entity can be found with the rel self. That same url can be also used for delete (DELETE method) and update (PUT method). ","srcFilePath":"src/pages/docs/field_mappings/index.md","id":"field_mappings","location":"/docs/field_mappings/","url":"/docs/field_mappings/"},"general":{"title":"General","description":"General API","layout":"guide","icon":"star","weight":1,"content":" {$page.description} Initial Navigation to obtain URLs URLs are not part of this API, they may change at any moment. URLs must be asked to the service before making any request. The URLs can be obtained making a request to the root resource of the Service /. The response in json HAL format will contain a _links object with the different template links to be used. For example: { \"name\": \"pulpo-api\", \"description\": \"API for consuming PULPO Services\", \"_links\": { \"self\": { \"href\": \"http://localhost:8084/\" }, \"data-sources\": { \"href\": \"http://localhost:8084/{projectId}/data-sources{lb}?filter{rb}\", \"templated\": true }, \"field-mappings\": { \"href\": \"http://localhost:8084/{projectId}/field-mappings{lb}?filter{rb}\", \"templated\": true }, \"fields\": { \"href\": \"http://localhost:8084/{projectId}/fields{lb}?filter{rb}\", \"templated\": true }, \"individuals\": { \"href\": \"http://localhost:8084/{projectId}/individuals{lb}?filter{rb}\", \"templated\": true }, \"individual-segments\": { \"href\": \"http://localhost:8084/{projectId}/individual-segments{lb}?filter{rb}\", \"templated\": true } } } The template URLs for managing collections such as Data Sources or Individuals can be found inside the section _links with the keys data-sources or individuals. (These keys are our API and they will never change). These template URLs allow us to build ULRs that can always be used to obtain the entities (GET method) and create new ones (POST method). (Note that not all collections support creation of new objects. e.g. Individuals API doesn't allow to create individuals directly). These template URLs need certain items to be replaced in order to have a valid URL: Mandatory params: {lb}parameterName{rb} e.g. The {lb}projectId{rb} item must be replaced with the projectId of the current project. Optional params: {lb}?parameterName{rb} e.g. The {lb}?filter{rb} item must be replaced with a valid oData filter or with an empty string. Important: Optional parameters can be added at any time to these APIs, therefore, clients must consider that the templates may change with additional optional parameter names (never with mandatory parameter names). Navigating through a collection of entities, the link to each entity can be found with the rel self. That same url can be also used for delete (DELETE method) and update (PUT method). Pagination Every collection URL can be paginated using the optional params page and size. This is an example of a response to this url: http://localhost:8084/my-project/data-sources?page=0&size=1 { \"_embedded\": { \"data-sources\": [ { \"dateCreated\": \"2017-09-14T12:00:04Z\", \"dateModified\": \"2017-09-14T12:00:04Z\", \"identifier\": \"AV6AQqVHWUV1yhbro9xD\", \"name\": \"my Liferay 6.2\", \"provider\": { \"name\": \"liferay-de\" }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/data-sources/AV6AQqVHWUV1yhbro9xD\" }, \"data-sources\": { \"href\": \"http://localhost:8084/my-project/data-sources\" } } } ] }, \"_links\": { \"first\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=0&size=1\" }, \"self\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=0&size=1\" }, \"next\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=1&size=1\" }, \"last\": { \"href\": \"http://localhost:8084/my-project/data-sources?page=1&size=1\" } }, \"page\": { \"size\": 1, \"totalElements\": 2, \"totalPages\": 2, \"number\": 0 } } From this response, you can obtain the total number of existing elements under the page block and also the links to other pages of data sources. Sorting Every collection URL can be sorted using the optional param sort. e.g. Given a url for a Collection (such as http://localhost:8084/my-project/data-sources) I could sort the results by name appending to the url ?sort=name In order to navigate inside the fields of an entity, you should use the separator / e.g. I could sort the results by the author name appending ?sort=author/name By default, the sorting is in ascending order. (0-1-A-Z). However, this can be changed adding desc after the parameter name separated with a comma. e.g. I could sort the results by name descending, appending to the url ?sort=name,desc I could also sort by more than one field, adding more than one sort parameter or separating the fields by commas. In this situation, the first parameter found is used to sort, and in case of coincidence, the next parameter in the list is used to sort and so on. e.g. I could sort the results by the name of the Provider, and in case of coincidence then order by the Date of creation appending this to the url: ?sort=provider/name,dateCreated If I want to change the order to descending for one of the fields, then I must used separated parameters in this way: ?sort=provider.name,desc&sort=dateCreated,asc Filtering Not all collectons allow filtering. The ones that support it will contain the optional parameter {lb}?filter{rb} in their template. In order to filter a collection based on the value of one or more fields, you can use the optional parameter filter following a subste of the oData standard. Comparison Operators | Operator | Description | Example | |---------- |------------ |------------------------------| | eq | Equal | Address/City eq 'Redmond' | |ne|Not equal|Address/City ne 'London'| |gt |Greater than |Price gt 20| |ge |Greater than or equal|Price ge 10| |lt|Less than |Price lt 20| |le |Less than or equal |Price le 100| Logical Operators | Operator | Description | Example | |---------- |------------ |------------------------------| |and|Logical and |Price le 200 and Price gt 3.5| |or |Logical or |Price le 3.5 or Price gt 200 | Grouping Operators | Operator | Description | Example | |---------- |------------ |------------------------------| |( ) |Precedence grouping |(Price eq 5) or (Address/City eq 'London') | e.g. We could append this to a URL that returns a collection of Data Sources to filter the DataSource by an author name and a name. ?filter=(author/name eq 'Julio') and (name ne 'datasource-name') ","srcFilePath":"src/pages/docs/general/index.md","id":"general","location":"/docs/general/","url":"/docs/general/"},"fields":{"title":"Fields","description":"Fields API","layout":"guide","icon":"menu","weight":4,"content":" {$page.description} The Field Model Fields contain information about different entities (individuals, accounts, individual segments... etc). All the different values in time for a field are stored as fields themeshelves. Therefore, if the field Address for an Individual changed 5 times, we will have 5 fields for the Address for that particular Individual. The entity field contains the following fields: context dataSourceIdentifier dateModified fieldType - A schema.org property label name value ownerType - The entity that owns this field (e.g. an Individual, an Individual Identifier...) ownerIdentifier - The Identifier of the entity that owns this field. Fields Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as fields pointing to the collection of Fields. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of fields under the key fields. This is an example of a response to this url: http://localhost:8084/my-project/fields?page=0&size=1 { \"_embedded\": { \"fields\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-0-c14MMBozrmZ0T\", \"dateModified\": \"2017-11-13T10:43:13Z\", \"fieldType\": \"http://schema.org/telephone\", \"identifier\": \"AV-0-deU4MMBozrmZ0UO\", \"label\": \"home\", \"name\": \"telephone\", \"ownerIdentifier\": \"AV-0-dcI4MMBozrmZ0UM\", \"ownerType\": \"individual\", \"value\": \"+34699001234\", \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/fields/AV-0-deU4MMBozrmZ0UO\" }, \"individual\": { \"href\": \"http://localhost:8084/my-project/individuals/AV-0-dcI4MMBozrmZ0UM\" }, \"fields\": { \"href\": \"http://localhost:8084/my-project/fields{?filter}\", \"templated\": true } } } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/fields?page=0&size=1\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Fields or Update of Fields manually is not supported. Fields are automatically generated and updated from the Field Chunks sent by the different Connectors. Deletion of existing Fields is not allowed for now either. Navigating through the list of fields, the link to each field can be found with the rel self. ","srcFilePath":"src/pages/docs/fields/index.md","id":"fields","location":"/docs/fields/","url":"/docs/fields/"},"individuals":{"title":"Individuals","description":"Individuals API.","layout":"guide","icon":"person","weight":2,"content":" {$page.description} The Individual Model Individuals are a complex entity that contain several contexts for each Person stored in our system. Those contexts are: Identity & Demographics Sentiment Analysis Event Attendance Sales Interaction Social Engagement Transactions Browsing Activity Firmographic Support Interaction etc Only some of those contexts are available for now. Each context will contain certain Fields with information. These fields will correspond to schema.org Properties The following fields are currently supported as part of an Invididual: dataSourceIdentifiers - a map with the different datasource identifiers and the datasource individual identifier (the primary key of this individual in the original datasource) dateCreated dateModified identifier demographics - a Map of identity & demographic Fields corresponding to properties of the Type Person from Schema.org sentiment - a Map of sentiment analysis Fields Individuals Collection As described in Initial Navigation to obtain URLs, the _links section of the root resource will contain a template link labelled as individuals pointing to the collection of Individuals. This API supports pagination, sorting and filtering. The response will contain inside the _embedded section, a list of individuals under the key individuals. This is an example of a response to this url: http://localhost:8084/my-project/individuals?page=0&size=20 { \"_embedded\": { \"individuals\": [ { \"dateCreated\": \"2017-11-13T11:47:43Z\", \"dateModified\": \"2017-11-13T11:47:44Z\", \"demographics\": { \"address\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-1NOAPDh9K2u0PkWnD\", \"dateModified\": null, \"fieldType\": \"http://schema.org/address\", \"identifier\": null, \"individualIdentifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"label\": null, \"name\": \"address\", \"projectId\": \"my-project\", \"value\": \"125 Main Street, Candelaria\" } ], \"telephone\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-1NN9zDh9K2u0PkWnC\", \"dateModified\": null, \"fieldType\": \"http://schema.org/telephone\", \"identifier\": null, \"individualIdentifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"label\": \"home\", \"name\": \"telephone\", \"projectId\": \"my-project\", \"value\": \"+34699001234\" } ], \"email\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-1NOAPDh9K2u0PkWnD\", \"dateModified\": null, \"fieldType\": \"http://schema.org/email\", \"identifier\": null, \"individualIdentifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"label\": null, \"name\": \"email\", \"projectId\": \"my-project\", \"value\": \"cris@liferay.com\" } ], \"age\": [ { \"context\": \"demographics\", \"dataSourceIdentifier\": \"AV-1NN9zDh9K2u0PkWnC\", \"dateModified\": null, \"fieldType\": \"http://schema.org/age\", \"identifier\": null, \"individualIdentifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"label\": null, \"name\": \"age\", \"projectId\": \"my-project\", \"value\": \"32\" } ] }, \"identifier\": \"AV-1NOYHDh9K2u0PkWnL\", \"sentiment\": {}, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/individuals/AV-1NOYHDh9K2u0PkWnL\" }, \"individuals\": { \"href\": \"http://localhost:8084/my-project/individuals{?filter}\", \"templated\": true }, \"individual-segments\": { \"href\": \"http://localhost:8084/my-project/individuals/AV-1NOYHDh9K2u0PkWnL/individual-segments\" } } } ] }, \"_links\": { \"self\": { \"href\": \"http://localhost:8084/my-project/individuals?page=0&size=20\" } }, \"page\": { \"size\": 20, \"totalElements\": 1, \"totalPages\": 1, \"number\": 0 } } Creation of new Individuals or Update of Individuals manually is not supported. Indivuals are automatically generated and updated from the Field Chunks sent by the different Connectors. Deletion of existing Individuals is not allowed for now either. Navigating through the list of individuals, the link to each individual can be found with the rel self. Filtering and Sorting Individuals Collection Individuals collection can be filtered as explained in filtering. These are some examples of filtering: Individuals from Madrid: ?filter=(demographics/city/value eq 'Madrid') Individuals under 30 years old: ?filter=(demographics/age/value lt '30') Individuals from Madrid sorted by age in descending order:?filter=(demographics/city/value eq 'Madrid')&sort=demographics/age/value,desc Individuals who work as Engineers from Malaga or Madrid under 40 years old:?filter=(demographics/city/value eq 'Madrid' or demographics/city/value eq 'Malaga') and (demographics/age/value lt '30') and (demographics/jobTitle/value eq 'Engineer') Individual Segments As part of the links of each individual, the following links can be found using these keys: individual-segments - The collection of Individual Segments this individual belongs to individuals - The collection of Individuals ","srcFilePath":"src/pages/docs/individuals/index.md","id":"individuals","location":"/docs/individuals/","url":"/docs/individuals/"},"segments":{"title":"Segments","description":"Interessantiss quisso pudia ce receita de bolis, mais bolis eu num gostis. Suco de cevadiss deixa as pessoas mais interessantiss. Vehicula non. Ut sed ex eros. Vivamus sit amet nibh non tellus tristique interdum.","layout":"guide","icon":"persons","weight":6,"content":" {$page.description} Lorem ipsum dolor sit amet var hello = function() { console.log('Hello, World!'); }; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum. Fusce eros metus, hendrerit ut egestas nec, sagittis id velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum. Fusce eros metus, hendrerit ut egestas nec, sagittis id velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum. Fusce eros metus, hendrerit ut egestas nec, sagittis id velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum. Fusce eros metus, hendrerit ut egestas nec, sagittis id velit. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum. Fusce eros metus, hendrerit ut egestas nec, sagittis id velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum. Fusce eros metus, hendrerit ut egestas nec, sagittis id velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum. Fusce eros metus, hendrerit ut egestas nec, sagittis id velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum. Fusce eros metus, hendrerit ut egestas nec, sagittis id velit. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum. Fusce eros metus, hendrerit ut egestas nec, sagittis id velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum. Fusce eros metus, hendrerit ut egestas nec, sagittis id velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum. Fusce eros metus, hendrerit ut egestas nec, sagittis id velit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla libero, eleifend in euismod eget, fringilla id diam. Proin quis interdum ipsum. Fusce eros metus, hendrerit ut egestas nec, sagittis id velit. ","srcFilePath":"src/pages/docs/segments/index.md","id":"segments","location":"/docs/segments/","url":"/docs/segments/"}},"childIds":["general","individuals","datasources","fields","field_mappings","segments","search"]},"updates":{"title":"Updates","description":"Check out what's new","updates":[{"version":"0.0.1","major":false,"features":[{"icon":"hammer","title":"DataSources API is out!","description":"You can start using the Data Source API now.","url":"/"}]}],"content":" ","srcFilePath":"src/pages/updates/index.soy","id":"updates","location":"/updates/","url":"/updates/"}},"childIds":["docs","updates"]}}